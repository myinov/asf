//----------------------------------------------------------------------------------------
//RandGen.cpp
//Copyright (c) JohnSoft 2006. All rights reserved. Builder C++ 6.0
//Initial date: August,14,2006. Final date:
//Реализация классов, реализующих датчики случайных чисел

#pragma hdrstop

#include "RandGen.h"
//----------------------------------------------------------------------------------------
#pragma package(smart_init)


//****************************************************************************************
//                          РЕАЛИЗАЦИЯ КЛАССА TRandGen_64
//Класс реализует 64-х разрядный генератор случайных чисел, реализованный по ЛИНЕЙНОМУ
//КОНГРУЭНТНОМУ МЕТОДУ: X(n+1) = (a*X(n) + c) mod m с максимальным периодом последователь-
//ности 2^64-1. Датчик вырабатывает последовательность равномерно распределенных положитель-
//ных целых псевдослучайных чисел с заданным пользователем периодом в диапазоне от [0..T].
//На основе данного ГСЧ в классе реализованы функции, позволяющие получать случайные числа
//с другими законами распределения и ряд сервисных функций для управления и мониторинга
//работы ГСЧ.
//****************************************************************************************
// Инициализация таблицы настроек параметров ГСЧ с заданным периодом последовательности
//                 (для 64-х разрядного датчика случайных чисел)
const RNG64_LCM TRandGen_64::SetupTable[] = {
 {T64_1T, 10995116285ui64, 232354146749ui64, 1099511627775ui64}
};

//========================================================================================
// I. ОПИСАНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TRandGen_64
//    PUBLIC MEMBER-FUNCTION OF TRandGen_64 CLASS
//========================================================================================
//****************************************************************************************
//СТАТУС: I.1; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: bool Set(RNG64_ID Period, unsigned __int64 X0 = 0)
//НАЗНАЧЕНИЕ: Установка параметров работы генератора: периода и начального значения. Если
//X0 == 0, то в качестве начального значения устанавливается случайная величина. Функция
//возвращает true в случае установки нового периода ГСЧ и false - в противном случае (данный
//вариант возможен только в том случае, когда таблица настройки ГСЧ SetupTable ни содержит
//ни одной записи.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. RNG64_ID Period - идентификатор периода последовательности;
//2. unsigned __int64 X0 - начальное значение случайной последовательности.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: bool lSuccess - результат установки новых параметров ГСЧ
//****************************************************************************************
bool TRandGen_64::Set(RNG64_ID Period, unsigned __int64 X0)
{this->Reset(); //Начальная установка параметров датчика случайных чисел
 //----------------------------------------------------------------------------------
 this->SetPeriod(Period);//Установка рабочих параметров генератора по величине Period
 //----------------------------------------------------------------------------------
 //Установка начального значения последовательности X0
 if (X0 == 0) this->_Rn = this->Randomize();
 else this->_Rn = this->SetX0(X0);
 return this->IsReady();
}
//****************************************************************************************
//СТАТУС: I.2; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: unsigned __int64 SetX0(unsigned __int64 InitValue)
//НАЗНАЧЕНИЕ: Установка нового начального значения последовательности InitValue. Функция
//возвращает новое значение _X0. Если объект класса неработоспособен _X0 устанавливается в
//ноль. После установки нового начального значения параметр _Count устанавливается в 0, а
//_Rn присваивается новое _X0.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//unsigned __int64 InitValue - начальное значение случайной последовательности.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: unsigned __int64 _X0 - установленное начальное значение
//****************************************************************************************
unsigned __int64 TRandGen_64::SetX0(unsigned __int64 InitValue)
{this->_Count = 0;
 this->_X0 = (this->IsReady()) ? InitValue : 0;
 this->_Rn = this->_X0;
 return this->_X0;
}
//****************************************************************************************
//СТАТУС: I.3; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: unsigned __int64 Randomize()
//НАЗНАЧЕНИЕ: Инициализация начального значения последовательности _X0 случайной величиной.
//Функция возвращает новое значение _X0. Если объект класса неработоспособен _X0 устанавли-
//вается в ноль. После установки нового _X0 параметр _Count устанавливается в 0, а _Rn
//присваивается новое _X0.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: нет
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: unsigned __int64 _X0 - установленное начальное значение
//****************************************************************************************
unsigned __int64 TRandGen_64::Randomize()
{this->_Count = 0;
 if (this->IsReady())
 {unsigned __int64 mask = 0x00000000FFFFFFFF;
  this->_X0 = GetCycleCount() & mask;
 }
 else this->_X0 = 0;
 this->_Rn = this->_X0;
 return this->_X0;
}
//****************************************************************************************
//СТАТУС: I.4; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& GetM(string& t) const
//НАЗНАЧЕНИЕ: Получение значения модуля или периода последовательности в строковом виде.
//Строка-приемник t, передается в функцию по ссылке. Функция возвращает строку t после
//занесения в нее значения m.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& t - ссылка на строку-приемник значения периода ГСЧ
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& t - ссылка на строку со значением периода ГСЧ
//****************************************************************************************
string& TRandGen_64::GetM(string& t) const
{char buffer[41];
 ostrstream text (buffer, sizeof(buffer));
 text << this->GetM() << ends;
 t.assign(text.str()); text.seekp(0);
 return t;
}
//****************************************************************************************
//СТАТУС: I.5; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& GetA(string& t) const
//НАЗНАЧЕНИЕ: Получение значения множителя последовательности a в строковом виде. Строка-
//приемник t, передается в функцию по ссылке. Функция возвращает строку t после занесения
//в нее значения a.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& t - ссылка на строку-приемник значения множителя a ГСЧ
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& t - ссылка на строку со значением множителя a ГСЧ
//****************************************************************************************
string& TRandGen_64::GetA(string& t) const
{char buffer[41];
 ostrstream text (buffer, sizeof(buffer));
 text << this->GetA() << ends;
 t.assign(text.str()); text.seekp(0);
 return t;
}
//****************************************************************************************
//СТАТУС: I.6; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& GetC(string& t) const
//НАЗНАЧЕНИЕ: Получение значения приращения последовательности c в строковом виде. Строка-
//приемник t, передается в функцию по ссылке. Функция возвращает строку t после занесения
//в нее значения c.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& t - ссылка на строку-приемник значения приращения c ГСЧ
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& t - ссылка на строку со значением приращения c ГСЧ
//****************************************************************************************
string& TRandGen_64::GetC(string& t) const
{char buffer[41];
 ostrstream text (buffer, sizeof(buffer));
 text << this->GetC() << ends;
 t.assign(text.str()); text.seekp(0);
 return t;
}
//****************************************************************************************
//СТАТУС: I.7; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& GetX0(string& t) const
//НАЗНАЧЕНИЕ: Получение начального значения последовательности _X0 в строковом виде. Строка-
//приемник t, передается в функцию по ссылке. Функция возвращает строку t после занесения
//в нее значения _X0.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& t - ссылка на строку-приемник начального значения _X0 ГСЧ
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& t - ссылка на строку с начальным значением _X0 ГСЧ
//****************************************************************************************
string& TRandGen_64::GetX0(string& t) const
{char buffer[41];
 ostrstream text (buffer, sizeof(buffer));
 text << this->GetX0() << ends;
 t.assign(text.str()); text.seekp(0);
 return t;
}
//****************************************************************************************
//СТАТУС: I.8; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& GetRn(string& t) const
//НАЗНАЧЕНИЕ: Получение текущего случайного значения _Rn в строковом виде. Строка-приемник
//t, передается в функцию по ссылке. Функция возвращает строку t после занесения в нее зна-
//чения _Rn.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& t - ссылка на строку-приемник значения _Rn ГСЧ
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& t - ссылка на строку со значением _Rn ГСЧ
//****************************************************************************************
string& TRandGen_64::GetRn(string& t) const
{char buffer[41];
 ostrstream text (buffer, sizeof(buffer));
 text << this->GetRn() << ends;
 t.assign(text.str()); text.seekp(0);
 return t;
}
//****************************************************************************************
//СТАТУС: I.9; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& GetCount(string& t) const
//НАЗНАЧЕНИЕ: Получение значения счетчика обращений _Count к ГСЧ в строковом виде. Строка-
//приемник t, передается в функцию по ссылке. Функция возвращает строку t после занесения
//в нее значения _Count.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& t - ссылка на строку-приемник числа обращений _Count к ГСЧ
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& t - ссылка на строку со числа обращений _Count к ГСЧ
//****************************************************************************************
string& TRandGen_64::GetCount(string& t) const
{char buffer[41];
 ostrstream text (buffer, sizeof(buffer));
 text << this->GetCount() << ends;
 t.assign(text.str()); text.seekp(0);
 return t;
}
//****************************************************************************************
//СТАТУС: I.10; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& Info(string& s) const
//НАЗНАЧЕНИЕ: Формирование свойств объекта TRandGen_64 в строке s, передаваемой по ссылке.
//Свойства объекта разделяются символом '\n'. Свойства генератора случайных чисел:
// RANDOM NUMBER GENERATOR (64-bits): <Ready || Not ready>
//  1. ALGORITHM: X(n+1) = (a*X(n)+c) mod m;
//  2. Period M: < value >;
//  3. Multiplier A: < value >;
//  4. Increment C: <value>;
//  5. Initial value X0: < value >;
//  6. Current random number Xn: < value >;
//  7. RNG calls amount: < value >.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& s - ссылка на строковый объект
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& s - строка со свойствами RNG
//****************************************************************************************
string& TRandGen_64::Info(string& s) const
{string t;
 //Формирование заголовка объекта и его состояния
 s.assign("Random Number Generator (64-bits): ");
 s.append(this->Status(t));
 //Алгоритм работы RNG
 s.append("\n 1. Algorithm: "); s.append(this->Algorithm(t));
 //Период последовательности -  m
 s.append("\n 2. Period M: "); s.append(this->GetM(t));
 //Множитель последовательности - a
 s.append("\n 3. Multiplier A: "); s.append(this->GetA(t));
 //Приращение последовательности - с
 s.append("\n 4. Increment C: "); s.append(this->GetC(t));
 //Начальное значение последовательности - X0
 s.append("\n 5. Initial value X0: "); s.append(this->GetX0(t));
 //Текущее случайное значение - Rn
 s.append("\n 6. Current random number Xn: "); s.append(this->GetRn(t));
 //Число обращений к ГСЧ - Count
 s.append("\n 7. RNG calls amount: "); s.append(this->GetCount(t));
 s.append(1,'\n');
 return s;
}
//****************************************************************************************
//СТАТУС: I.11; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: unsigned __int64 Rand()
//НАЗНАЧЕНИЕ: Получение целой положительной равномерно распределенной случайной величины
//в интервале от [0..T], T - период последовательности. Функция является базовой для выра-
//ботки случайных величин с другими законами распределения или интервалами распределения.
//В случае неработоспособности объекта класса функция всегда возвращает 0. При обращении
//к функции вычисляется новое значение _R(n+1) = (a*_Rn + c) mod m. Функция возвращает
//предыдущее значение, т.е. _Rn. Таким образом, при первом обращении к ГСЧ возвращается
//значение X0.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: нет
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
//unsigned __int64 _Rn - случайная величина, вычисленная на предыдущем шаге
//****************************************************************************************
unsigned __int64 TRandGen_64::Rand()
{unsigned __int64 Rn = this->_Rn;
 if (this->IsReady()) //Выработка новой псевдослучайной величины
 {this->_Rn = (pRNG->a*Rn + pRNG->c)%pRNG->m;
  this->_Count++;//Увеличиваем число обращений к ГСЧ
 }
 return Rn;
}
//****************************************************************************************
//СТАТУС: I.12; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: double Random()
//НАЗНАЧЕНИЕ: Функция возвращает равномерно распределенную случайную величину в интервале
//от 0 до 1 типа double. Если объект класса неработоспособен, функция возвращает 0.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: нет
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: double R - равномерно распределенная СВ на интервале [0..1]
//****************************************************************************************
double TRandGen_64::Random()
{if (!this->IsReady()) return 0.0;
 double Xn = this->Rand();
 double M = pRNG->m;
 return Xn/M;
}
//****************************************************************************************
//СТАТУС: I.13; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: long Rand(long A, long B)
//НАЗНАЧЕНИЕ: Функция возвращает целую равномерно распределенную СВ в интервале от A до B,
//где A < B: R = A + (B-A+1)*Random(). Если объект класса неработоспособен возвращается 0.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. long A - нижняя граница интервала;
//2. long B - верхняя граница интервала.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: long R - равномерно распределенная целая СВ на интервале [A..B]
//****************************************************************************************
long TRandGen_64::Rand(long A, long B)
{if (!this->IsReady()) return 0L;
 if (A == B) return A;
 if (A > B) {long C = A; A = B; B = C;}
 long R = A + (B-A+1)*this->Random();
 return R;
}
//****************************************************************************************
//СТАТУС: I.14; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: double Random(double A, double B)
//НАЗНАЧЕНИЕ: Функция возвращает вещественную равномерно распределенную СВ в интервале от
//A до B, где A < B: R = A + (B-A)*Random(). Неработоспособный объект класса возвращает 0.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. double A - нижняя граница интервала;
//2. double B - верхняя граница интервала.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: double R - равномерно распределенная СВ на интервале [A..B]
//****************************************************************************************
double TRandGen_64::Random(double A, double B)
{if (!this->IsReady()) return 0.0;
 if (A == B) return A;
 if (A > B) {double C = A; A = B; B = C;}
 double R = A + (B-A)*this->Random();
 return R;
}
//****************************************************************************************
//СТАТУС: I.15; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ:  double Gauss(double M = 0.0, double D = 1.0)
//НАЗНАЧЕНИЕ: Функция возвращает нормально распределенную случайную величину с математичес-
//ким ожиданием M и дисперсией D. Для получения СВ, распределенной по гауссовскому закону,
//используется метод полярных координат. Неработоспособный объект класса возвращает 0.
//Метод позволяет по двум независимым равномерно распределенным СВ от [0..1] получить две
//независимые нормально распределенные СВ. Данная функция возвращает только одно из двух
//СВ. Алгоритм работы (см. Д. Кнут Искусство программирования для ЭВМ, т.2 п.3.4.1):
//1. Выработать две независимые равномерно распределенные СВ от [0..1] U1 и U2 и рассчитать
//   величины V1 = 2*U1 - 1, V2 = 2*U2 - 1 (V1 & V2 будут равномерно распределены [-1..1]).
//2. Вычислить S = V1^2 + V2^2.
//3. Проверить S >= 1. Если S >= 1, вернуться к шагу 1 (Шаги 1 - 3 выполняются в среднем
//   1.27 раза при стандартном отклонении 0.587).
//4. Вычислить X1 и X2 по формулам: X1 = V1*sqrt[(-2Ln(S))/S], X2 = V2*sqrt[(-2Ln(S))/S].
//   X1 & X2 - нормально распределенные СВ с M = 0 и D = 1.0.
//Переход к нормальному распределению с произвольными мат. ожиданием M и дисперсией D
//производится посредством преобразования: Y' = M + Y*sqrt(D).
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. double M - математическое ожидание (по умолчанию M = 0);
//2. double D - дисперсия (по умолчанию D = 1).
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
//double R - нормально распределенное число с мат. ожиданием M и дисперсией D.
//****************************************************************************************
double TRandGen_64::Gauss(double M, double D)
{if (!this->IsReady()) return 0.0;
 double X1, X2, V1, V2, S;
 do
 {X1 = this->Random(); X2 = this->Random();
  V1 = 2.0*X1 - 1.0;   V2 = 2.0*X2 - 1.0;
  S = V1*V1 + V2*V2;
 } while ((S >= 1.0) || (S == 0.0));
 X1 = V1*sqrt((-2.0*log(S))/S);
 X1 = M + X1*sqrt(fabs(D));
 return X1;
}
//****************************************************************************************
//СТАТУС: I.16; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: bool Gauss(double& X1, double& X2, double M = 0.0, double D = 1.0)
//НАЗНАЧЕНИЕ: Функция вычисляет две независимые нормально распределенных СВ с математичес-
//ким ожиданием M и дисперсией D. Для получения СВ, распределенной по гауссовскому закону,
//используется метод полярных координат. Неработоспособный объект класса возвращает false.
//Результат работы функции заносится в переменные X1 и X2, передаваемые по ссылке.
//Метод позволяет по двум независимым равномерно распределенным СВ от [0..1] получить две
//независимые нормально распределенные СВ. Данная функция возвращает только одно из двух
//СВ. Алгоритм работы (см. Д. Кнут Искусство программирования для ЭВМ, т.2 п.3.4.1):
//1. Выработать две независимые равномерно распределенные СВ от [0..1] U1 и U2 и рассчитать
//   величины V1 = 2*U1 - 1, V2 = 2*U2 - 1 (V1 & V2 будут равномерно распределены [-1..1]).
//2. Вычислить S = V1^2 + V2^2.
//3. Проверить S >= 1. Если S >= 1, вернуться к шагу 1 (Шаги 1 - 3 выполняются в среднем
//   1.27 раза при стандартном отклонении 0.587).
//4. Вычислить X1 и X2 по формулам: X1 = V1*sqrt[(-2Ln(S))/S], X2 = V2*sqrt[(-2Ln(S))/S].
//   X1 & X2 - нормально распределенные СВ с M = 0 и D = 1.0.
//Переход к нормальному распределению с произвольными мат. ожиданием M и дисперсией D
//производится посредством преобразования: Y' = M + Y*sqrt(D).
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. double& X1 - ссылка на переменную-приемник первой нормально распределенной СВ;
//2. double& X2 - ссылка на переменную-приемник второй нормально распределенной СВ;
//3. double M - математическое ожидание (по умолчанию M = 0);
//4. double D - дисперсия (по умолчанию D = 1).
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: bool lSuccess - результат работы функции.
//****************************************************************************************
bool TRandGen_64::Gauss(double& X1, double& X2, double M, double D)
{if (!this->IsReady()) {X1 = X2 = 0.0;  return false;}
 double V1, V2, S;
 do
 {X1 = this->Random(); X2 = this->Random();
  V1 = 2.0*X1 - 1.0;   V2 = 2.0*X2 - 1.0;
  S = V1*V1 + V2*V2;
 } while ((S >= 1.0) || (S == 0.0));
 S = sqrt((-2.0*log(S))/S);
 X1 = V1*S;
 X2 = V2*S;
 D = sqrt(fabs(D));//Вычисление СКВО по заданной дисперсии
 X1 = M + X1*D;
 X2 = M + X2*D;
 return true;
}
//****************************************************************************************
//СТАТУС: I.17; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ:  double Relay(double D = 1.0)
//НАЗНАЧЕНИЕ: Функция вычисляет СВ распределенную по закону Релея с функцией распределения:
//F(x) = 1-Exp(-x^2/2*D^2), x > 0, D - параметр распределения. Неработоспособный объект
//всегда возвращает 0. Обратная функция по которой вычисляется СВ, распределенная по Релею
//имеет вид: X = sqrt[-2*D^2*Ln(Y)], Y - равномерно распределенная СВ в интервале [0..1].
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//double D - параметр функции распределения по Релею (по умолчанию D = 1).
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: double R - СВ, распределенная по Релею
//****************************************************************************************
double TRandGen_64::Relay(double D)
{if (!this->IsReady() || D == 0.0) return 0.0;
 double R;
 do {R = this->Random();} while (R == 0.0);
 R = D*sqrt(-2.0*log(R));//D*sqrt(-2.0*log(R))
 return R;
}
//****************************************************************************************
//СТАТУС: I.18; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ:  double Exp(double t = 1.0)
//НАЗНАЧЕНИЕ: Функция вычисляет СВ распределенную по экспоненциальному (показательному)
//закону с функцией распределения: F(x) = 1-Exp(-t*x), x > 0, t - параметр распределения.
//Неработоспособный объект всегда возвращает 0. Обратная функция по которой вычисляется СВ,
//распределенная по экспоненциальному закону имеет вид: X = -Ln(Y)/t, Y - равномерно рас-
//пределенная СВ в интервале [0..1].
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//double t - параметр экспоненциальной функции распределения (по умолчанию t = 1).
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: double R - СВ, распределенная по экспоненциальному закону
//****************************************************************************************
double TRandGen_64::Exp(double t)
{if (!this->IsReady() || t == 0.0) return 0.0;
 double R;
 do {R = this->Random();} while (R == 0.0);
 R = -1.0*log(R)/t;
 return R;
}
//****************************************************************************************
//СТАТУС: I.19; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: bool GaussSignal(TRandSignal& RandSignal, double D = 1.0)
//НАЗНАЧЕНИЕ: Функция генерирует случайный гауссовский сигнал с нулевым МО и дисперсией D.
//Случайный гауссовский сигнал имеет две случайные составляющие: амплитуду и фазу, которые
//заносятся в класс типа TRandSignal, передаваемый в функцию по ссылке. Для получения
//случайного гауссовского сигнала необходимо выработать две случайные величины:
//1. Амплитуду, распределенную по закону Релея с параметром D;
//2. Фазу, равномерно распределенную на интервале [0..2PI].
//Неработоспособный объект возвращает false и присваивает объекту RandSignal значения:
//Ampl = 0.0, Phase = 0.0.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. TRandSignal& RandSignal - ссылка на структуру-приемник случайных составляющих сигнала;
//2. double D (D = 1) - дисперсия случайного гауссового сигнала.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: bool lSuccess - результат работы функции
//****************************************************************************************
bool TRandGen_64::GaussSignal(TRandSignal& RandSignal, double D)
{if (!this->IsReady() || D == 0.0) {RandSignal.Set(0.0,0.0,RAD); return false;}
 //Формируем амплитуду и фазу случайного гауссовского сигнала с дисперсией D
 RandSignal.SetAmplitude(this->Relay(D)/SqrtTwo);
 RandSignal.SetPhase(this->Rand2PI(),RAD);
 return true;
}
//****************************************************************************************
//СТАТУС: I.20; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ:
// bool GaussSignal(double& RelayAmpl, double& RandPhase, double D = 1.0)
//НАЗНАЧЕНИЕ: Функция генерирует случайный гауссовский сигнал с нулевым МО и дисперсией D.
//Случайный гауссовский сигнал имеет две случайные составляющие: амплитуду и фазу, которые
//заносятся в переменные RelayAmpl и RandPhase, соответственно, передаваемые в функцию по
//ссылке. Для получения случайного гауссовского сигнала необходимо выработать две случайные
//величины:
//1. Амплитуду, распределенную по закону Релея с параметром D;
//2. Фазу, равномерно распределенную на интервале [0..2PI].
//Неработоспособный объект возвращает false и присваивает значения: RelayAmpl = 0.0,
//RandPhase = 0.0.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. double& RelayAmpl - ссылка на переменную-приемник случайной амплитуды сигнала;
//2. double& RandPhase - ссылка на переменную-приемник случайной фазы сигнала;
//3. double D (D = 1) - дисперсия случайного гауссового сигнала.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: bool lSuccess - результат работы функции
//****************************************************************************************
bool TRandGen_64::GaussSignal(double& RelayAmpl, double& RandPhase, double D)
{if (!this->IsReady() || D == 0.0) {RelayAmpl = RandPhase = 0.0; return false;}
 //Формируем амплитуду и фазу случайного гауссовского сигнала с дисперсией D
 RelayAmpl = this->Relay(D)/SqrtTwo;
 RandPhase = this->Rand2PI();
 return true;
}
//****************************************************************************************
//СТАТУС: I.21; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ:
// bool GaussSignal(RandSignalVect& Coll, unsigned long N, double D = 1.0)
//НАЗНАЧЕНИЕ: Функция генерирует N реализаций случайного гауссовского сигнала с нулевым МО
//и дисперсией D. Случайный гауссовский сигнал имеет две случайные составляющие: амплитуду
//и фазу, которые заносятся в контейнер Coll, передаваемый в функцию по ссылке, с размером
//равным N (число реализаций). Для получения одной реализации случайного гауссовского сиг-
//нала необходимо выработать две случайные величины:
//1. Амплитуду, распределенную по закону Релея с параметром D;
//2. Фазу, равномерно распределенную на интервале [0..2PI].
//Неработоспособный объект возвращает false и присваивает каждому объекту RandSignal
//контейнера Coll значения: Ampl = 0.0, Phase = 0.0.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. RandSignalVect& Coll - ссылка на контейнер-приемник N реализаций гауссового сигнала;
//2. unsigned long N - требуемое число реализаций случайного сигнала;
//3. double D (D = 1) - дисперсия случайного гауссового сигнала.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: bool lSuccess - результат работы функции
//****************************************************************************************
bool TRandGen_64::GaussSignal(RandSignalVect& Coll, unsigned long N, double D)
{Coll.resize(N);
 if (N == 0 || Coll.size() != N || !this->IsReady() || D == 0.0) return false;
 //Формируем N реализаций гауссовского сигнала с дисперсией D в контейнере Coll
 for (unsigned long i = 0; i < N; i++)
  Coll[i].Set(this->Relay(D)/SqrtTwo,this->Rand2PI(),RAD);
 return true;
}
//****************************************************************************************
//СТАТУС: I.22; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: bool RandomVector(cvector& V, ulong n, double a, double b)
//НАЗНАЧЕНИЕ: Получение комплексного случайного вектора размерности n с реальными и мнимыми
//частями распределенными по равновероятному закону в промежутке [a..b]. Функция возвращает
//true при успешном создании вектора необходимого размера и его инициализации СВ, распреде-
//ленными по равновероятному закону в интервале [a..b].
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. cvector& V - ссылка на комплексный вектор-приемник СВ, распределенных равновероятно;
//2. unsigned long n - размерность вектора V;
//3. double a - нижняя граница интервала;
//4. double b - верхняя граница интервала.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: bool lSuccess - результат работы функции
//****************************************************************************************
bool TRandGen_64::RandomVector(cvector& V, ulong n, double a, double b)
{//Устанавливаем новые размеры вектора V без сохранения прежних значений
 if (V.Resize(n,false) == false) return false;
 if (a > b) {double c = a; a = b; b = c;}
 double x,y;
 double delta = b-a;
 //Инициализация вектора V случайными величинами распределенными равновероятно в интервале
 //[a..b]
 for (ulong i = 0L; i < n; i++)
 {x = a + delta*this->Random();//Реальная часть комплексного числа
  y = a + delta*this->Random();//Мнимая часть комплексного числа
  V.Put(i,complex(x,y));
 }
 return true;
}
//****************************************************************************************
//СТАТУС: I.23; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: GaussVector(cvector& V, ulong n, double M = 0.0, double D = 1.0)
//НАЗНАЧЕНИЕ: Получение комплексного случайного вектора размерности n с реальными и мнимыми
//частями распределенными по нормальному закону с мат. ожиданием M и дисперсией D. Функция
//возвращает true при успешном создании вектора необходимого размера и его инициализации СВ,
//распределенными по нормальному закону.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. cvector& V - ссылка на комплексный вектор-приемник СВ, распределенных равновероятно;
//2. unsigned long n - размерность вектора V;
//3. double M (M = 0.0) - математическое ожидание;
//4. double D (D = 1.0) - дисперсия.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: bool lSuccess - результат работы функции
//****************************************************************************************
bool TRandGen_64::GaussVector(cvector& V, ulong n, double M, double D)
{//Устанавливаем новые размеры вектора V без сохранения прежних значений
 if (V.Resize(n,false) == false) return false;
 double x,y;
 //Инициализация вектора V случайными величинами распределенными по нормальному закону с
 //мат. ожиданием M и дисперсией D
 for (ulong i = 0L; i < n; i++)
 {this->Gauss(x,y,M,D);
  V.Put(i,complex(x,y));
 }
 return true;
}
//****************************************************************************************
//СТАТУС: I.24; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: complex& Random(complex& z, double a, double b)
//НАЗНАЧЕНИЕ: Получение комплексного случайного числа с реальными и мнимыми частями распре-
//деленными по равновероятному закону в промежутке [a..b]. Функция возвращает ссылку на
//комплексное число z, с реальной и мнимой частями распределенными по равновероятному закону
//в интервале [a..b].
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. complex& z - ссылка на комплексное число-приемник СВ, распределенной равновероятно;
//2. double a - нижняя граница интервала;
//3. double b - верхняя граница интервала.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
//complex& z - ссылка на комплексное число с равновероятно распределенными мнимой и реаль-
//ной частями.
//****************************************************************************************
complex& TRandGen_64::Random(complex& z, double a, double b)
{double real,image;
 double delta = b-a;
 real = a + delta*this->Random();//Реальная часть комплексного числа
 image = a + delta*this->Random();//Мнимая часть комплексного числа
 return z(real,image);
}
//****************************************************************************************
//СТАТУС: I.25; public; TRandGen_64 class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: complex& Gauss(complex& z, double M = 0.0, double D = 1.0)
//НАЗНАЧЕНИЕ: Получение комплексного числа, с реальной и мнимой частями распределенными по
//нормальному закону с мат. ожиданием M и дисперсией D. Функция возвращает ссылку на
//комплексное число z, с реальной и мнимой частями распределенными по нормальному закону.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. complex& z - ссылка на комплексное число-приемник СВ, распределенной нормально;
//2. double M (M = 0.0) - математическое ожидание;
//3. double D (D = 1.0) - дисперсия.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
//complex& z - ссылка на комплексное число с нормально распределенными мнимой и реальной
//частями.
//****************************************************************************************
complex& TRandGen_64::Gauss(complex& z, double M, double D)
{double real,image;
 //Вырабатываем пару случайных величин, распределенных по нормальному закону с мат. ожида-
 //нием M и дисперсией D
 this->Gauss(real,image,M,D);
 return z(real,image);
}

//========================================================================================
// II. ОПИСАНИЕ ЗАКРЫТЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TRandGen_64
//     PRIVATE MEMBER-FUNCTION OF TRandGen_64 CLASS
//========================================================================================
//****************************************************************************************
//СТАТУС: II.1; private; class TRandGen_64 member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: bool SetPeriod(RNG64_ID Period)
//НАЗНАЧЕНИЕ: Функция устанавливает указатель pRNG на адрес структуры в таблице SetupTable
//со значением поля RNG64_ID Id равным значению Period. Структура типа RNG64_LCM определяет
//параметры ГСЧ (a, c & m) для устанавливаемого периода. При неудачном поиске в таблице
//настроек по умолчанию устанавливается указатель на структуру, соответствующий первому
//элементу таблицы SetupTable.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//RNG64_ID Period - идентификатор задаваемого периода последовательности случайных чисел.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: bool lSuccess - результат установки нового периода ГСЧ
//****************************************************************************************
bool TRandGen_64::SetPeriod(RNG64_ID Period)
{this->Reset();
 unsigned int szTable = sizeof(TRandGen_64::SetupTable);
 unsigned int Items;//Количество элементов в таблице
 if (szTable == 0) return false;
 Items = szTable/(sizeof(TRandGen_64::SetupTable[0]));
 //Поиск в таблице SetupTable по полю Id структуры RNG64_LCM
 for (unsigned int i = 0; i < Items; i++)
 {if (TRandGen_64::SetupTable[i].Id == Period)
  {this->pRNG = &TRandGen_64::SetupTable[i]; break;}
 }
 //Поиск окончился неудачей - выбираем указатель на первый элемент таблицы
 if (this->pRNG == NULL) this->pRNG = &TRandGen_64::SetupTable[0];
 return true;
}


