//----------------------------------------------------------------------------------------
//RandGen.h
//Copyright (c) JohnSoft 2006. All rights reserved. Builder C++ 6.0
//Initial date: August,14,2006. Final date:
//Объявление классов, реализующих датчики случайных чисел
#ifndef RandGenH
#define RandGenH

//Заголовочные файлы
#include "const.h"
#include "mvector.h"

#pragma hdrstop

#include "CoordSystem.h"


//****************************************************************************************
//Предварительное объявление имен классов и функций
//****************************************************************************************
class TRandGen_64;//Генератор случайных чисел с максимальным периодом до 2^64-1

//Вызов инструкции ассемблера RDTSC - Read Time Stamp Counter
//Инструкция возвращает 64-разрядное число в регистрах EDX и EAX равное количеству тактов,
//прошедших с момента запуска процессора
#pragma warn -8070 //rvl = 8070
#pragma warn -inl
inline unsigned __int64 GetCycleCount(void) {__emit__(0x0F, 0x31);}


// ОБЪЯВЛЕНИЕ КОНСТАНТ, СООТВЕТСТВУЮЩИХ ЗАДАВАЕМОМУ ПЕРИОДУ ПОСЛЕДОВАТЕЛЬНОСТИ ДЛЯ
// 64-х РАЗРЯДНОГО ДАТЧИКА СЛУЧАЙНЫХ ЧИСЕЛ
enum RNG64_ID {T64_1T = 1, T64_MAX = 2};// RNG64_Id;

// Объявление структуры данных генератора случайных чисел с заданным периодом повторения,
// реализованного по ЛИНЕЙНОМУ КОНГРУЭНТНОМУ МЕТОДУ X(n+1) = (a*X(n) + c) mod m
struct RNG64_LCM {
 RNG64_ID Id;
 unsigned __int64 a;
 unsigned __int64 c;
 unsigned __int64 m;
};

typedef std::vector<TRandSignal> RandSignalVect;

//*********************************************************************************************
//Объявление класса TRandGen_64
//Copyright (c) JohnSoft 2006. All rights reserved.
//Initial date: August,11,2006; Final date:
//Класс реализует генератор псевдослучайных чисел с максимально возможным периодом повторе-
//ния 2^64-1 () и возможностью формирования случайных чисел по основным вероятностным зако-
//нам распределния. Базовые переменные класса определены как 64-разрядные целые положитель-
//ные числа (unsigned __int64), что позволяет реализовать такой период последовательности.
//Требования по выбору параметров ГСЧ изложены в книге Д. Кнута "Искусство программирования
//для ЭВМ" т. 2 [1] (п. 3.2 Выработка равномерно распределенных случайных чисел).
//Генератор случайных чисел (ГСЧ) формирует псевдослучайной последовательности целых поло-
//жительных чисел от 0 до m (m = 2^e - 1, e - показатель степени от 1 до 64) на основе
//ЛИНЕЙНОГО КОНГРУЭНТНОГО МЕТОДА: X(n+1) = (a*X(n) + c) mod m, n >= 0, где mod - операция
//деления по модулю m. При выборе X(0), a, c и m следует руководствоться следующими прави-
//лами (см. [1] п.3.6.-ВЫВОДЫ):
//1) Число X(0) выбирается произвольно.
//2) Число m должно быть велико. Удобно выбирать его равным размеру слова ЭВМ, так как при
//   этом эффективно вычисляется (aX+c) mod m. m должно быть на единицу больше или меньше
//   величины 2^e, которая определяет максимальный период последовательности (в нашем слу-
//   чае (MAX(e) = 64), т.к. в этом случае младшие биты X(n) будут также случайны как и
//   старшие биты X(n). Кроме того, в качестве m можно выбрать наибольшее простое число,
//   меньшего, чем w = 2^e.
//3) Выбор a.
//   3.1. Если m представляет собой степень двойки (для ЭВМ, работающей в двоичной системе
//   счисления, выбирают a таким, что a mod 8 = 5. Для десятичной ЭВМ - a mod 200 = 21.
//   При таком выборе a, при условии выбора c описанным ниже способом гарантируется, что
//   ГСЧ даст все m возможных различных значений X прежде, чем они начнут повторяться, и,
//   кроме того, гарантируется высокая "мощность".
//   3.2. Множитель a должен превосходить величину sqrt(m), желательно, чтобы он был больше
//   m/100, но меньше m-sqrt(m). Последовательность разрядов в двоичном или десятичном
//   представлении a не должна иметь простого, регулярного вида.
//   При интенсивном использовании ГСЧ множитель a, кроме того, следует выбирать так, чтобы
//   удовлетворялся "Спектральный тест" (см. [1] п. 3.3.4).
//4) Выбор c. Постоянная c д.б. равна нечетному числу (когда m - степень двойки) и не д.б.
//   кратна 5 (когда m - степень 10). Желательно выбирать c так, чтобы отношение c/m было
//   приблизительно равно величине: 0.21132 48654 05187 1 (см. [1] п. 3.3.3 отнош-е (41)).
//5) Менее значимые (правые) разряды X не очень хороши с точки зрения случайности, поэтому
//   при использовании числа X основную роль должны играть наиболее значимые разряды. Лучше
//   всего рассматривать X как случайную дробь X/m в интервале между 0 и 1, т.е. представ-
//   лять X с десятичной точкой слева, чем как случайное целое число, расположенное между
//   0 и m-1.
//
//****************************************************************************************
class TRandGen_64 {
//-----------------------------------------------------------------------------------
// ОБЪЯВЛЕНИЕ ЗАКРЫТЫХ ЧЛЕНОВ-ДАННЫХ КЛАССА TRandGen_64
//-----------------------------------------------------------------------------------
private:
 //Указатель на структуру, определяющую значения a, c, m для заданного периода
 const RNG64_LCM* pRNG;
 unsigned __int64 _X0; //Начальное значение последовательности
 //Текущие характеристики работы генератора
 unsigned __int64 _Rn; //Текущее случайное целое число, выработанное генератором
 unsigned __int64 _Count; //Текущее количество обращений к генератору

 //Таблица настроек генератора случайных чисел с заданным периодом повторения
 static const RNG64_LCM SetupTable[];

//-----------------------------------------------------------------------------------
// I. ОБЪЯВЛЕНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TRandGen_64
//-----------------------------------------------------------------------------------
public:

//***********************************************************************************
// ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ И ДЕСТРУКТОРА КЛАССА TRandGen_64
//***********************************************************************************
 //Объявление конструктора по умолчанию
 TRandGen_64() {Set(T64_1T);};
 //Объявление конструктора с аргументами
 TRandGen_64(RNG64_ID Period, unsigned __int64 X0 = 0)  {Set(Period,X0);};
 //Объявление деструктора класса
 ~TRandGen_64() {Reset();};

 //Установка параметров работы генератора: периода и начального значения
 bool Set(RNG64_ID Period, unsigned __int64 X0 = 0);
 //Установка начального значения последовательности
 unsigned __int64 SetX0(unsigned __int64 InitValue);
 //Инициализация начального значения последовательности случайной величиной
 unsigned __int64 Randomize();

 //Получение свойств класса
 bool IsReady() const {return (pRNG != NULL) ? true : false;};
 //Идентификатор периода псевдослучайной последовательности
 unsigned int GetID() const {return (this->IsReady()) ? pRNG->Id : 0;};
 //Получение модуля или периода последовательности
 unsigned __int64 GetPeriod() const {return (this->IsReady()) ? pRNG->m : 0;};
 unsigned __int64 GetM() const {return this->GetPeriod();};
 //Получение множителя последовательности a
 unsigned __int64 GetA() const {return (this->IsReady()) ? pRNG->a : 0;};
 //Получение приращения последовательности c
 unsigned __int64 GetC() const {return (this->IsReady()) ? pRNG->c : 0;};
 //Получение начального значения последовательности _X0
 unsigned __int64 GetX0() const {return this->_X0;};
 //Получение текущего случайного числа _Rn
 unsigned __int64 GetRn() const {return this->_Rn;};
 //Получение количества обращений к генератору случайных чисел _Count
 unsigned __int64 GetCount() const {return this->_Count;};

 //Получение свойств генератора в виде строкового объекта string
 string& Info(string& s) const;
 //Статус ГСЧ - <Ready> || <Not Ready>
 string& Status(string& t) const {return t = (this->IsReady()) ? "Ready" : "Not ready";};
 //Алгоритм выработки псевдослучайных величин
 string& Algorithm(string& t) const {return t.assign("X(n+1) = (aX(n)+c) mod m");};
 //Значение модуля (периода последовательности m
 string& GetM(string& t) const;
 //Значение множителя последовательности a
 string& GetA(string& t) const;
 //Значение приращения последовательности c
 string& GetC(string& t) const;
 //Начальное значение последовательности _X0
 string& GetX0(string& t) const;
 //Текущее значение случайной величины
 string& GetRn(string& t) const;
 //Текущее значение обращений к ГСЧ
 string& GetCount(string& t) const;


 //----------------------------------------------------------------------------------
 // Объявление функций - членов класса, вырабатывающих случайные величины
 //----------------------------------------------------------------------------------
 //Получение целой положительной равномерно распределенной СВ в интервале [0..T]
 //БАЗОВАЯ функция для выработки любой другой случайной величины
 unsigned __int64 Rand();
 //Получение равномерно распределенной СВ от 0 до 1 типа double
 double Random();
 //Получение целой равномерно распределенной СВ от A до B (A > B)
 long Rand(long A, long B);
 //Получение равномерно распределенной СВ от А до B (A > B)
 double Random(double A, double B);
 //Получение равномерно распределенной СВ от 0 до 2*PI
 double Rand2PI() {return this->Random(0.0,TwoPI);};
 //Получение нормально распределенной СВ с мат. ожиданием M и дисперсией D методом
 //полярных координат
 double Gauss(double M = 0.0, double D = 1.0);
 //Получение двух независимых нормально распределенных СВ с математическим ожиданием M и
 //дисперсией D методом полярных координат
 bool Gauss(double& X1, double& X2, double M = 0.0, double D = 1.0);
 //Получение СВ распределенной по закону Релея с F(x) = 1-Exp(-x^2/2*D^2), x > 0
 double Relay(double D = 1.0);
 //Получение СВ распределенной по экспоненциальному закону: F(x)=1-EXP(-t*x), x > 0.
 double Exp(double t = 1.0);
 //Получение случайного гауссовского сигнала с заданной дисперсией D и МО M = 0.
 //Случайная амплитуда распределена по закону Релея с параметром D;
 //Случайная фаза распределена равновероятно на интервале [0..2PI].
 bool GaussSignal(TRandSignal& RandSignal, double D = 1.0);
 //Получение случайного гауссовского сигнала с заданной дисперсией D и МО M = 0.
 //Случайная амплитуда распределена по закону Релея с параметром D;
 //Случайная фаза распределена равновероятно на интервале [0..2PI].
 bool GaussSignal(double& RelayAmpl, double& RandPhase, double D = 1.0);
 //Получение N реализаций случайного гауссовского сигнала с нулевым МО и дисперсией D
 bool GaussSignal(RandSignalVect& Coll, unsigned long N, double D = 1.0);
 //Получение комплексного случайного вектора размерности n с реальными и мнимыми частями
 //распределенными по равновероятному закону в промежутке [a..b]
 bool RandomVector(cvector& V, ulong n, double a, double b);
 //Получение комплексного случайного вектора размерности n с реальными и мнимыми частями
 //распределенными по нормальному закону с мат. ожиданием M и дисперсией D
 bool GaussVector(cvector& V, ulong n, double M = 0.0, double D = 1.0);
 //Получение комплексного числа с реальными и мнимыми частями, распределенными по равнове-
 //роятному закону в промежутке [a..b]
 complex& Random(complex& z, double a, double b);
 //Получение комплексного числа с реальными и мнимыми частями, распределенными по нормаль-
 //ному закону с мат. ожиданием M и дисперсией D
 complex& Gauss(complex& z, double M = 0.0, double D = 1.0);

//-----------------------------------------------------------------------------------
// II. ОБЪЯВЛЕНИЕ ЗАКРЫТЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TRandGen_64
//-----------------------------------------------------------------------------------
private:
 //Начальная установка всех характеристик TRandGen_64
 void Reset() {pRNG = NULL; _X0 = 0; _Rn = 0; _Count = 0;};
 //Установка заданного периода последовательности генератора
 bool SetPeriod(RNG64_ID Period);

};//Завершение объявления класса TRandGen_64



//--------------------------- The end of file "RandGen.h" --------------------------------
#endif //ЗАВЕРШЕНИЕ ОБЪЯВЛЕНИЯ ЗАГОЛОВОЧНОГО ФАЙЛА "RandGen.H"

