//----------------------------------------------------------------------------------------
//CoDec.h
//Copyright (c) JohnSoft 2006. All rights reserved. Builder C++ 6.0
//Initial date: September,12,2006. Final date:
//Реализация классов, реализующие функциональные преобразователи значений сигналов.
//----------------------------------------------------------------------------------------
#pragma hdrstop

#include "CoDec.h"

#pragma package(smart_init)

//****************************************************************************************
//                          РЕАЛИЗАЦИЯ КЛАССА TFuncGen_DSClipper
//Класс реализует два взаимообратных функциональных преобразования значений сигналов с
//ограничением по максимальным и минимальным значениям входных и выходных значений:
//1. ПРЯМОЕ ПРЕОБРАЗОВАНИЕ P(U) = k*F(U) + c (модуляция, кодирование)
//2. ОБРАТНОЕ ПРЕОБРАЗОВАНИЕ: U = InvF((P-c)/k) (демодуляция, декодирование)
//****************************************************************************************

//========================================================================================
// I. РЕАЛИЗАЦИЯ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TFuncGen_DSClipper
//    PUBLIC MEMBER-FUNCTION OF TFuncGen_DSClipper CLASS
//========================================================================================
//****************************************************************************************
//СТАТУС: I.1; public; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& GetThreshold_U(string& s) const
//НАЗНАЧЕНИЕ: Формирование установленных пороговых значений напряжения в строке s, переда-
//ваемой по ссылке. Функция возвращает ссылку на строку s. Предыдущее содержимое строки s
//уничтожается. Формат представления пороговых значений напряжения:
//<Thresholds U: Umin = <d_value>, Umax = <d_value>>
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& s - строка-приемник пороговых значений напряжений
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& s - ссылка на строку с пороговыми значениями напряжений
//****************************************************************************************
string& TFuncGen_DSClipper::GetThreshold_U(string& s) const
{char buffer[81];
 ostrstream text(buffer, sizeof(buffer));
 s.assign("Thresholds U: ");
 text << "Umin = " << _Umin << ", Umax = " << _Umax << ends;
 s.append(text.str()); text.seekp(0);
 return s;
}
//****************************************************************************************
//СТАТУС: I.2; public; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& GetThreshold_P(string& s) const
//НАЗНАЧЕНИЕ: Формирование установленных пороговых значений мощности в строке s, передавае-
//мой по ссылке. Функция возвращает ссылку на строку s. Предыдущее содержимое строки s
//уничтожается. Формат представления пороговых значений мощности:
//<Thresholds P: Pmin = <d_value>, Pmax = <d_value>>
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& s - строка-приемник пороговых значений мощностей
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& s - ссылка на строку с пороговыми значениями мощностей
//****************************************************************************************
string& TFuncGen_DSClipper::GetThreshold_P(string& s) const
{char buffer[81];
 ostrstream text(buffer, sizeof(buffer));
 s.assign("Thresholds P: ");
 text << "Pmin = " << _Pmin << ", Pmax = " << _Pmax << ends;
 s.append(text.str()); text.seekp(0);
 return s;
}
//****************************************************************************************
//СТАТУС: I.3; public; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& GetFactors(string& s) const
//НАЗНАЧЕНИЕ: Формирование коэффициентов функционального преобразователся в строке s, пе-
//редаваемой по ссылке. Функция возвращает ссылку на строку s. Предыдущее содержимое строки
//s уничтожается. Формат представления коэффициентов:
//<Factors: k = <d_value>, c = <d_value>>
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& s - строка-приемник пороговых значений мощностей
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& s - ссылка на строку с пороговыми значениями мощностей
//****************************************************************************************
string& TFuncGen_DSClipper::GetFactors(string& s) const
{char buffer[81];
 ostrstream text(buffer, sizeof(buffer));
 s.assign("Factors: ");
 text << "k = " << k << ", c = " << c << ends;
 s.append(text.str()); text.seekp(0);
 return s;
}
//****************************************************************************************
//СТАТУС: I.4; public; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& Info(string& s) const
//НАЗНАЧЕНИЕ: Формирование свойств функционального преобразователя в строке s, передаваемой
//по ссылке. Функция возвращает ссылку на строку s. Предыдущее содержимое строки
//s уничтожается. Формат представления сведений об объекте:
//<-------------------------------------------------------------------------------------->
// Functional Genenerator with Double-Sided Clipper:
// 1. Direct Conversion: P(U) = k*F(U) + c, Inversion: U(P) = InvF((P-c)/k);
// 2. Factors: k = <d_val>, c = <d_val>;
// 3. Thresholds U: Umin = <d_val>, Umax = <d_val>;
// 4. Thresholds P: Pmin = <d_val>, Pmax = <d_val>;
// 5. P(U) = <TFuncGen_DSClipper->Func(string_arg)>;
// 6. U(P) = <TFuncGen_DSClipper->InvFunc(string_arg)>.
//<-------------------------------------------------------------------------------------->
//Пункты 5 и 6 формируются вызовами виртуальных функций производных классов, так как именно
//они реализуют вызовы функций прямого и обратного преобразований.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& s - строка-приемник пороговых значений мощностей
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& s - ссылка на строку с пороговыми значениями мощностей
//****************************************************************************************
string& TFuncGen_DSClipper::Info(string& s) const
{string t;
 s.assign("Functional Genenerator with Double-Sided Clipper:\n");
 s.append(" 1. Direct Conversion: P(U) = k*F(U) + c, Inversion: U(P) = InvF((P-c)/k);\n");
 s.append(" 2. "); GetFactors(t); s.append(t); s.append(";\n");
 s.append(" 3. "); GetThreshold_U(t); s.append(t); s.append(";\n");
 s.append(" 4. "); GetThreshold_P(t); s.append(t); s.append(";\n");
 s.append(" 5. "); Func(t); s.append(t); s.append(";\n");
 s.append(" 6. "); InvFunc(t); s.append(t); s.append(".\n");
 return s;
}
//****************************************************************************************
//СТАТУС: I.5; public; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: void SetThreshold_U(double Umin, double Umax)
//НАЗНАЧЕНИЕ: Установка пороговых значений напряжений. Условия установки напряжений:
//Umax > Umin >= 0. В противном случае происходит автоматическая коррекция устанавливаемых
//порогов по напряжению.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. double Umin - минимальный порог по напряжению;
//2. double Umax - максимальный порог по напряжению;
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: нет
//****************************************************************************************
void TFuncGen_DSClipper::SetThreshold_U(double Umin, double Umax)
{if (Umin < 0.0) Umin = 0.0;
 Umax = fabs(Umax);
 if (Umin > Umax) {double Temp = Umin; Umin = Umax; Umax = Temp;}
 else if (Umin == Umax) Umax += 10.0;
 _Umin = Umin;
 _Umax = Umax;
 _CalcFactors();
}
//****************************************************************************************
//СТАТУС: I.6; public; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: void SetThreshold_P(double Pmin, double Pmax)
//НАЗНАЧЕНИЕ: Установка пороговых значений мощности. Условия установки порогов мощности:
//Pmax > Pmin >= 0. В противном случае происходит автоматическая коррекция устанавливаемых
//порогов по мощности.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. double Pmin - минимальный порог по мощности;
//2. double Pmax - максимальный порог по мощности;
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: нет
//****************************************************************************************
void TFuncGen_DSClipper::SetThreshold_P(double Pmin, double Pmax)
{if (Pmin < 0.0) Pmin = 0.0;
 Pmax = fabs(Pmax);
 if (Pmin > Pmax) {double Temp = Pmin; Pmin = Pmax; Pmax = Temp;}
 else if (Pmin == Pmax) Pmax += 10.0;
 _Pmin = Pmin;
 _Pmax = Pmax;
 _CalcFactors();
}
//****************************************************************************************
//СТАТУС: I.9; public; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: double Encode(double InU) const
//НАЗНАЧЕНИЕ: Прямое преобразование: P(U) = k*F(U) + c. По входному уровню напряжения InU
//виртуальной функцией Func(U), реализующей прямое преобразование в производных классах,
//рассчитывается выходной уровень мощности Pout. Функция осуществляет двухстороннее ограни-
//чение по выходной мощности в зависимости от типа функции:
//1) Функция кодирования (декодирования) монотонно-возрастающая:
//   a) U <= _Umin => Pout = _Pmin  b) U >= _Umax => Pout = _Pmax;
//2) Функция кодирования (декодирования) монотонно-убывающая:
//   a) U < _Umin => Pout = _Pmax  b) U >= _Umax => Pout = _Pmin;
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: double InU - входной уровень напряжения
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: double Pout - выходной уровень мощности
//****************************************************************************************
double TFuncGen_DSClipper::Encode(double InU) const
{if (InU <= _Umin) return (this->_FuncType == IncFunc) ? _Pmin : _Pmax;
 else if (InU >= _Umax) return (this->_FuncType == IncFunc) ? _Pmax : _Pmin;
 return k*Func(InU)+c;
}
//****************************************************************************************
//СТАТУС: I.10; public; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: double Decode(double InP) const
//НАЗНАЧЕНИЕ: Обратное преобразование: U(P) = InvF((P-c)/k). По входному уровню мощности
//InP виртуальной функцией InvFunc(U), реализующей обратное преобразование в производных
//классах, рассчитывается выходной уровень напряжения Uout. Функция осуществляет двухсто-
//роннее ограничение по выходному напряжению в зависимости от типа функции:
//1) Функция кодирования (декодирования) монотонно-возрастающая:
//   a) InP <= _Pmin => Uout = _Umin  b) InP >= _Pmax => Uout = _Umax;
//2) Функция кодирования (декодирования) монотонно-убывающая:
//   a) InP < _Pmin => Uout = _Umax  b) InP >= _Pmax => Uout = _Umin.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: double InP - входной уровень мощности
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: double Uout - выходной уровень напряжения
//****************************************************************************************
double TFuncGen_DSClipper::Decode(double InP) const
{if (InP <= _Pmin) return (this->_FuncType == IncFunc) ? _Umin : _Umax;
 else if (InP >= _Pmax) return (this->_FuncType == IncFunc) ? _Umax : _Umin;
 return InvFunc((InP-c)/k);
}
//****************************************************************************************
//СТАТУС: I.11; public; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: virtual void Edit()
//НАЗНАЧЕНИЕ: Консольное редактирование свойств объекта класса TFuncGen_DSClipper. Функция
//может изменять свойства объекта, такие как значения порогов напряжений и мощности.
//----------------------------------------------------------------------------------------
//< Edit < Functional Generator with Two-Sided Clipper >
//< Functional Generator properties>
//  1. Edit <Thresholds U and P> --> Edit_Thresholds()
//  2. Exit
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: нет
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: нет
//****************************************************************************************
void TFuncGen_DSClipper::Edit()
{//Рабочие переменные
 STR_UINT EditOpts[2] = {
 {1, "Edit < Thresholds U and P >"},
 {2, "Exit"} };
 TB_STR_UINT EditMenu = {2,EditOpts};
 int row_start = wherey();
 int choice;
 bool flag = true;
 string s, line(78,'-');
 string h("Edit < Functional Generator with Two-Sided Clipper >");

 gotoxy(1,row_start); clreol();
 do //Цикл редактирования свойств объекта
 {cout << line << endl << h << endl;
  cout << this->Info(s) << endl << line << endl;
  //Выбор опции редактирования
  s = "Choose option [1..2]: ";
  choice = ConsoleChoice(EditMenu,1,s.c_str(),1);
  switch (choice)
  {case 1:
    ClrScr(1,row_start);
    Edit_Thresholds();
    break;
   case 2: flag = false; break;
  }
  ClrScr(1,row_start);//Очистка экрана
 } while (flag);
 ClrScr(1,row_start);//Очистка экрана
}


//========================================================================================
// II. РЕАЛИЗАЦИЯ ЗАЩИЩЕННЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TFuncGen_DSClipper
//     PROTECTED MEMBER-FUNCTION OF TFuncGen_DSClipper CLASS
//========================================================================================
//****************************************************************************************
//СТАТУС: II.1; protected; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: virtual void Edit_Thresholds()
//НАЗНАЧЕНИЕ: Консольное редактирование значений порогов напряжений и мощностей. Функция
//может изменять свойства объекта, такие как значения порогов напряжений и мощности.
//----------------------------------------------------------------------------------------
//< Edit < Functional Generator with Two-Sided Clipper >
//< Functional Generator properties>
//  1. Edit <Thresholds U and P> --> Edit_Thresholds()
//  2. Exit
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: нет
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: нет
//****************************************************************************************
void TFuncGen_DSClipper::Edit_Thresholds()
{//Рабочие переменные
 int row_start = wherey();
 char c;
 string s, t;
 string line(78,'-');
 string h("Edit <Thresholds U & P> Input: <Umin: d1, Umax: d2, Pmin: d3, Pmax: d4;>");
 bool flag;
 gotoxy(1,row_start); clreol();

 do //Цикл ввода значений порогов напряжений и мощностей
 {//--------------------------------------------------------------------------------------
  cout << line << endl << this->Info(s) << line << endl;//Свойства объекта до редакт-я
  cout << h << endl << line << endl;
  //--------------------------------------------------------------------------------------
  //Ввод новых значений
  //--------------------------------------------------------------------------------------
  cout << "> "; cin.ignore(); getline(cin,s,';');
  SetThresholds(s.c_str());
  ClrScr(1,row_start);//Очистка экрана
  //Формирование значений, хранящихся в контейнере, после ввода новых элементов
  s.assign("New => ");
  this->GetThreshold_U(t); s.append(t);
  this->GetThreshold_P(t); s.append(1,' ');  s.append(t);
  cout << line << endl << s << endl;
  cout << line << endl << this->Info(s) << line << endl;//Свойства объекта после редакт-я
  //--------------------------------------------------------------------------------------
  //Подтверждение введенных данных
  cout << "Would you like to exit? [y/n]: "; cin >> c;
  if (c == 'Y' || c == 'y') flag = false;
  else //Повторный ввод данных
  {flag = true;
   ClrScr(1,row_start);//Очистка экрана
  }
 } while (flag);
 ClrScr(1,row_start);//Очистка экрана
}
//****************************************************************************************
//СТАТУС: II.2; protected; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: void _CalcFactors()
//НАЗНАЧЕНИЕ: Расчет коэффициентов k & c функционального преобразователя в зависимости от
//типа функции кодирования (возрастающая или убывающая).
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: нет
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: нет
//****************************************************************************************
void TFuncGen_DSClipper::_CalcFactors()
{double Fmax = Func(_Umax);
 if (this->_FuncType == IncFunc) //Функция кодирования - монотонно-возрастающая
 {k = (_Pmax - _Pmin)/(Fmax - Func(_Umin));
  c = _Pmax - k*Fmax;
 }
 else if (this->_FuncType == DecFunc) //Функция кодирования - монотонно-убывающая
 {k = (_Pmax - _Pmin)/(Func(_Umin) - Fmax);
  c = _Pmin - k*Fmax;
 }
}
//****************************************************************************************
//СТАТУС: I.3; protected; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ:
// void _SetThresholds(double Umin, double Umax, double Pmin, double Pmax)
//НАЗНАЧЕНИЕ: Установка пороговых значений напряжений и мощности. Условия установки:
//Umax > Umin >= 0, Pmax > Pmin >= 0. В противном случае происходит автоматическая коррек-
//ция устанавливаемых порогов по напряжению и мощности.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. double Umin - минимальный порог по напряжению;
//2. double Umax - максимальный порог по напряжению;
//3. double Pmin - минимальный порог по мощности;
//4. double Pmax - максимальный порог по мощности;
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: нет
//****************************************************************************************
void TFuncGen_DSClipper::_SetThresholds(double Umin, double Umax, double Pmin, double Pmax)
{//Установка пороговых значений по напряжению
 if (Umin < 0.0) Umin = 0.0;
 Umax = fabs(Umax);
 if (Umin > Umax) {double Temp = Umin; Umin = Umax; Umax = Temp;}
 else if (Umin == Umax) Umax += 10.0;
 _Umin = Umin;
 _Umax = Umax;
 //Установка пороговых значений по мощности
 if (Pmin < 0.0) Pmin = 0.0;
 Pmax = fabs(Pmax);
 if (Pmin > Pmax) {double Temp = Pmin; Pmin = Pmax; Pmax = Temp;}
 else if (Pmin == Pmax) Pmax += 10.0;
 _Pmin = Pmin;
 _Pmax = Pmax;
}
//****************************************************************************************
//СТАТУС: I.4; protected; TFuncGen_DSClipper class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: void _SetThresholds(const char* s)
//НАЗНАЧЕНИЕ: Импорт из строки s пороговых значений напряжений и мощности и их установка.
//Формат представления порогов напряжений и мощностей следующий:
//<Pmin: <d_value> Pmax: <d_value> Umin: <d_value> Umax: <d_value>>.
//Порядок их расположения в строке произвольный, допускается отсутствие от одного до всех
//значений порогов. При отсутствии какого-либо порога ему присваивается прежнее значение,
//после этого происходит обновление порогов по напряжению и мощности с пересчетом коэффи-
//циентов k и c.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//string& s - ссылка на строку с пороговыми значениями напряжений и мощностей.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: нет
//****************************************************************************************
void TFuncGen_DSClipper::_SetThresholds(const char* s)
{char Sep[] = ":=";
 StringSet IdentColl;
 double Pmin, Pmax, Umin, Umax;
 //Считываем из строки s порог Umin
 IdentColl.insert(string("Umin"));
 IdentColl.insert(string("MinU"));
 if (!ImportDoubleArg(Umin,s,IdentColl,Sep)) Umin = _Umin;
 IdentColl.clear();
 //Считываем из строки s порог Umax
 IdentColl.insert(string("Umax"));
 IdentColl.insert(string("MaxU"));
 if (!ImportDoubleArg(Umax,s,IdentColl,Sep)) Umax = _Umax;
 IdentColl.clear();
 //Считываем из строки s порог Pmin
 IdentColl.insert(string("Pmin"));
 IdentColl.insert(string("MinP"));
 if (!ImportDoubleArg(Pmin,s,IdentColl,Sep)) Pmin = _Pmin;
 IdentColl.clear();
 //Считываем из строки s порог Pmax
 IdentColl.insert(string("Pmax"));
 IdentColl.insert(string("MaxP"));
 if (!ImportDoubleArg(Pmax,s,IdentColl,Sep)) Pmax = _Pmax;
 IdentColl.clear();
 //Установка пороговых значений по напряжению и мощности с пересчетом коэффициентов
 _SetThresholds(Umin,Umax,Pmin,Pmax);
}

//****************************************************************************************
//                          РЕАЛИЗАЦИЯ КЛАССА TFuncGen_DSC_SinLaw
//Класс наследует все свойства класса TFuncGen_DSClipper и реализует два взаимообратных
//функциональных преобразования значений сигналов с ограничением по СИНУСОИДАЛЬНОМУ ЗАКОНУ
//F(x) = Sin(x), с D(x) = [0..Pi/2], E(F(x) = [0..1]. В этом случае F(x) принимает вид:
//F(x) = Sin[a*(X - Xmin)], где a = 0.5*Pi/(Xmax-Xmin).
//Таким образом, коэффициенты k и c вычисляются по формулам: k = Pmax-Pmin, c = Pmin.
//1. ПРЯМОЕ ПРЕОБРАЗОВАНИЕ: P(U) = k*F(U) + c = (Pmax-Pmin)*Sin(a*(U-Umin)) + Pmin, где
//   a = 0.5Pi/(Umax-Umin);
//2. ОБРАТНОЕ ПРЕОБРАЗОВАНИЕ: U(P) = InvF((P-c)/k) = (1/a)*ArcSin((P-c)/k) + Umin.
//****************************************************************************************

//========================================================================================
// II. РЕАЛИЗАЦИЯ ЗАЩИЩЕННЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TFuncGen_DSC_SinLaw
//     PROTECTED MEMBER-FUNCTION OF TFuncGen_DSCl_SinLaw CLASS
//========================================================================================
//****************************************************************************************
//СТАТУС: I.1; protected; TFuncGen_DSC_SinLaw class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& _GetFactorA(string& s) const
//НАЗНАЧЕНИЕ: Формирование коэффициента <a = 0.5Pi/(Umax-Umin)> в строке s. Формат вывода:
 //< a = 0.5Pi/(Umax-Umin) = <d_value> >
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& s - строка-приемник значения коэффициента a.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& s - ссылка на строку со значением коэффициента a.
//****************************************************************************************
string& TFuncGen_DSC_SinLaw::_GetFactorA(string& s) const
{char buffer[21];
 ostrstream text(buffer, sizeof(buffer));
 s.assign("a = 0.5Pi/(Umax-Umin) =  ");
 text << this->a << ends;
 s.append(text.str()); text.seekp(0);
 return s;
}


//****************************************************************************************
//                          РЕАЛИЗАЦИЯ КЛАССА TFuncGen_DSC_CosLaw
//Класс наследует все свойства класса TFuncGen_DSClipper и реализует два взаимообратных
//функциональных преобразования значений сигналов с ограничением по КОСИНУСОИДАЛЬНОМУ ЗАКОНУ
//F(x) = Cos(x), с D(x) = [0..Pi/2], E(F(x) = [0..1]. В этом случае F(x) принимает вид:
//F(x) = Cos[a*(X - Xmin)], где a = 0.5*Pi/(Xmax-Xmin).
//Таким образом, коэффициенты k и c вычисляются по формулам: k = Pmax-Pmin, c = Pmin.
//1. ПРЯМОЕ ПРЕОБРАЗОВАНИЕ: P(U) = k*F(U) + c = (Pmax-Pmin)*Cos(a*(U-Umin)) + Pmin, где
//   a = 0.5Pi/(Umax-Umin);
//2. ОБРАТНОЕ ПРЕОБРАЗОВАНИЕ: U(P) = InvF((P-c)/k) = (1/a)*ArcCos((P-c)/k) + Umin.
//****************************************************************************************

//========================================================================================
// II. РЕАЛИЗАЦИЯ ЗАЩИЩЕННЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TFuncGen_DSC_CosLaw
//     PROTECTED MEMBER-FUNCTION OF TFuncGen_DSCl_CosLaw CLASS
//========================================================================================
//****************************************************************************************
//СТАТУС: I.1; protected; TFuncGen_DSC_CosLaw class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& _GetFactorA(string& s) const
//НАЗНАЧЕНИЕ: Формирование коэффициента <a = 0.5Pi/(Umax-Umin)> в строке s. Формат вывода:
 //< a = 0.5Pi/(Umax-Umin) = <d_value> >
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: string& s - строка-приемник значения коэффициента a.
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& s - ссылка на строку со значением коэффициента a.
//****************************************************************************************
string& TFuncGen_DSC_CosLaw::_GetFactorA(string& s) const
{char buffer[21];
 ostrstream text(buffer, sizeof(buffer));
 s.assign("a = 0.5Pi/(Umax-Umin) =  ");
 text << this->a << ends;
 s.append(text.str()); text.seekp(0);
 return s;
}


