//elarray.cpp
//Реализация КЛАССА TElArray -- ЭЛЕМЕНТ АНТЕННОЙ РЕШЕТКИ
//Initial date: September,16,1998. Final date:
//Copyright (c) JohnSoft 1998. All rights reserved. Borland C++ v5.01.

//*****************************************************************************
//СТАТУС:
//НАИМЕНОВАНИЕ ФУНКЦИИ:
//НАЗНАЧЕНИЕ:
//Функция предназначена для ...
//
//-----------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. -
//2. -
//-----------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
//
//*****************************************************************************

#include "elarray.h"

//=========================================================
//I. ОПИСАНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TElArray
//   PUBLIC MEMBER-FUNCTION OF CLASS
//=========================================================

//*****************************************************************************
//СТАТУС: I.1; public; constructor with arguments
//НАИМЕНОВАНИЕ ФУНКЦИИ: TElArray(uint AntType, bool EPlLocate = MERIDIAN,
//                               ARGLIST* E_Arg = NULL, ARGLIST* H_Arg = NULL);
//НАЗНАЧЕНИЕ: Конструктор класса TElArray c аргументами.
//Функция предназначена для создания класса TElArray. Передаваемые функцией аргу-
//менты служат для инициализации характеристик базового класса Antenna. Характе-
//ристики класса TElArray инициализирутся функцией InitPerformance().
//-----------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. AntType - тип антенны
//2. EPlLocate - сонаправленность E-плоскости антенны с меридиональной или эква-
//ториальной плоскостью Земли (по умолчанию - EPlLocate = MERIDIAN)
//3. E_Arg - список параметров функции диаграммы направленности в E-плоскости
//4. H_Arg - список параметров функции диаграммы направленности в H-плоскости
//По умолчанию E_Arg и H_Arg равны NULL.
//Параметры антенны устанавливаемые по умолчанию:
//1. NoiseAmplLawType = RELAY_LAW
//2. NoisePhaseLawType = RAND2PI_LAW
//-----------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: нет
//*****************************************************************************
TElArray::TElArray(uint AntType, bool EPlLocate, ARGLIST* E_Arg, ARGLIST* H_Arg)
 //Вызов конструктора базового класса
 : Antenna(AntType, EPlLocate, E_Arg, H_Arg)
{
 //Начальная инициализация характеристик элемента АР
 InitPerformance();
}
//*****************************************************************************
//СТАТУС: I.2; public; TElArray class destructor
//НАИМЕНОВАНИЕ ФУНКЦИИ: virtual ~TElArray()
//НАЗНАЧЕНИЕ: Деструктор класса TElArray.
//Функция предназначена для разрушения класса TElArray.
//-----------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: нет
//-----------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: нет
//*****************************************************************************
TElArray::~TElArray()
{
 //#if defined(CONSOLE)
 //  cout << "\nDelete object ElemAntArray with number = " << num << endl;
 //#endif
}
//*****************************************************************************
//СТАТУС: I.3; public member-function of class TElArray
//НАИМЕНОВАНИЕ ФУНКЦИИ: string& GetPerformance(string& s, bool headfoot = ON)
//НАЗНАЧЕНИЕ:
//Функция формирует характеристики объекта TElArray в виде строки. Каждое свойство
//антенны разделяется символом '\n'. Характеристики антенны (пример):
//1. Antenna Type = Half-wave dipole
//2. E-plane is oriented on a MERIDIAN plane of the Earth
//3. Noise Amplitude Law = RELAY_LAW
//4. Noise Phase Law = RAND2PI_LAW
//5. Number = 0
//6. Status = SLAVE
//7. Usage = ON
//8. Lv = 0.0
//9. L = 0.0
//10. N = 1.0
//-----------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. string& s - ссылка на строковый объект
//2. bool headfoot - индикатор формирования заголовка и подвала строки
//                   характеристик антенны
//-----------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: string& s - строка со свойствами сигнала
//*****************************************************************************
string& TElArray::GetPerformance(string& s, bool headfoot)
{char buffer[80];
 ostrstream text (buffer, sizeof(buffer));
 string t;
 s.resize(0);
 if (headfoot == ON)
 {text << "**************  Performance of Antenna Array Element  **************"
       << endl << ends;
  s.append(text.str());
  text.seekp(0);
 }
 //Формируем характеристики только присущие антенне
 Antenna::GetPerformance(t,OFF);
 s.append(t);

 s.append("5.  Number = ");
 text << num << endl << ends;
 s.append(text.str());
 text.seekp(0);

 s.append("6.  Status = ");
 if (status == MASTER) s.append("MAIN ELEMENT\n");
 else s.append("AUXILIARY ELEMENT\n");

 s.append("7.  Usage = ");
 if (usage == ON) s.append("YES\n");
 else s.append("NO\n");

 s.append("8.  Lv = ");
 text << lv << endl << ends;
 s.append(text.str());
 text.seekp(0);

 s.append("9.  L = ");
 text << l << endl << ends;
 s.append(text.str());
 text.seekp(0);

 s.append("10. N = ");
 text << n << endl << ends;
 s.append(text.str());
 text.seekp(0);

 if (headfoot == ON)
 { text << "********************************************************************"
        << endl << ends;
   s.append(text.str());
 }
return s;
}

//======================================================
//II. ОПИСАНИЕ ЗАЩИЩЕННЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА ANTENNA
//    PROTECTED MEMBER-FUNCTION OF CLASS
//======================================================

//*****************************************************************************
//СТАТУС: II.1., protected, class member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: virtual void InitPerformance();
//НАЗНАЧЕНИЕ:
//Функция осуществляет начальную инициализацию характеристик элемента антенной
//решетки при его конструировании. По умолчанию устанавливаются следующие значе-
//ния: 1. num=0; 2. status=SLAVE; 3. usage=ON; 4. lv=0.0; 5. l=0.0; 6. n=1.0
//-----------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: нет
//-----------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: нет
//*****************************************************************************
void TElArray::InitPerformance()
{//Первоначальная инициализация характеристик элемента АР
 num = 0L;
 status = SLAVE;
 usage = ON;
 lv = 0.0;
 l = 0.0;
 n = 1.0;
}


