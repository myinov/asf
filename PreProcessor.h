//----------------------------------------------------------------------------------------
//PreProcessor.h
//Copyright (c) JohnSoft 2006. All rights reserved. C++ Builder 6.0.
//Initial date: December,09,2006. Final date:
//Объявление классов предпроцессоров обработки входного сигнала для его последующей
//обработки в адаптивных фильтрах для проведения численного и статистического моделирования
//адаптивных линейных антенных решеток.
//----------------------------------------------------------------------------------------

#ifndef PreProcessorH
#define PreProcessorH

//****************************************************************************************
// Объявление заголовочных файлов
//****************************************************************************************
#include "const.h"
#include "arrays.h"
#include "RandGen.h" //Генератор случайных чисел

//****************************************************************************************
//Идентификаторы типов схемы исключения приема сигналов с заданных направлений
//в дополнительных каналах пространственного адаптивного фильтра
//****************************************************************************************
//const uint MultiStageUnit  = 1; //Многоступенчатая схема
//const uint SingleStageUnit = 2; //Одноступенчатая схема

//****************************************************************************************
//Предварительное объявление имен классов
//****************************************************************************************

//Схемы исключения приема сигналов с заданных направлений в дополнительных каналах
class TAuxChSpaceRejectFilter;
class TMultiStageAuxChSRF;
class TSingleStageAuxChSRF;

//Модель предпроцессора адаптивного пространственного фильтра с N входами и ОДНИМ выходом
//на основе LAA
class TPreProcessor_MISO_SF;

//****************************************************************************************
//                       ОБЪЯВЛЕНИЕ КЛАССА - TPreProcessor_MISO_SF
//Класс предназначен для построения численной и статистической моделей предпроцессора обра-
//ботки входного сигнала пространственного N-канального адаптивного фильтра с ОСНОВНЫМ ка-
//налом на основе LAA. Класс моделирует следующие блоки предпроцессора:
//1. LAA - линейная эквидистантная однородная антенная решетка с всенаправленными элемента-
//   ми(class TUnEqLAA_ODA). Данное устройство осуществляет формирование входного сигнала
//   предпроцессора в зависимости от конфигурации LAA и сигнально-помеховой обстановки.
//2. Устройство формирования ОСНОВНОГО КАНАЛА пространственного фильтра - BaseChannel.
//3. КОММУТАТОР каналов LAA.
//4. ПРОСТРАНСТВЕННЫЙ РЕЖЕКТОРНЫЙ ФИЛЬТР - SRF (Space Reject Filter)
//****************************************************************************************
class TPreProcessor_MISO_SF {
 //--------------------------------------------------------------------------------------
 // ОБЪЯВЛЕНИЕ ЗАЩИЩЕННЫХ ЧЛЕНОВ-ДАННЫХ КЛАССА TPreProcessor_MISO_SF
 //--------------------------------------------------------------------------------------
 protected:
  //Линейная антенная решетка
  TUnEqLAA_ODA LAA;
  //-------------------------------------------------------------------------------------
  //Устройство формирования ОСНОВНОГО канала - BaseChannel
  //-------------------------------------------------------------------------------------
  TLongSet _BaseCh;//Индексы каналов LAA, подключенные к схеме формирования BaseChannel
  double _ScanAngle;//Угол сканирования при использовании BFC [-90..+90] deg

  TLongSet _AuxCh;//Индексы каналов LAA, используемые как дополнительные каналы фильтра

  //-------------------------------------------------------------------------------------
  //Пространственный режекторный фильтр - SRF
  //-------------------------------------------------------------------------------------
  TDoubleSet _ElimDirects;//Направления исключения
  TLongSet _WorkCh;//Индексы каналов LAA, используемые как рабочие каналы SRF
  bool _lUseBaseCh;//Флаг использования BaseChannel как рабочего канала SRF
  //Тип схемной реализации пространственного режекторного фильтра для исключения приема
  //сигналов в AuxCh фильтра с заданных направлений приема (ElimDirects):
  //1. MultiStageUnit - многоступенчатая схема;
  //2. SingleStageUnit - одноступенчатая схема.
  //Указатель на базовый класс устройств по исключению приема сигналов с заданных направ-
  //лений в дополнительных каналах адаптивных пространственных фильтрах с ОСНОВНЫМ каналом
  TAuxChSpaceRejectFilter* _SRF;


 //---------------------------------------------------------------------------------------
 // I. ОБЪЯВЛЕНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TPreProcessor_MISO_SF
 //---------------------------------------------------------------------------------------
 public:
 //*****************************************************************************
 // ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ И ДЕСТРУКТОРА КЛАССА TPreProcessor_MISO_SF
 //*****************************************************************************
 //Конструктор по умолчанию
 TPreProcessor_MISO_SF() {this->Init();};
 //Конструктор с аргументами

 //Объявление конструктора копирования

 //Объявление деструктора класса
 ~TPreProcessor_MISO_SF() {this->Reset();};

 //******************************************************************************
 // ОБЩЕДОСТУПНЫЕ ФУНКЦИИ ДЛЯ РАБОТЫ С КЛАССОМ TPreProcessor_MISO_SF
 //******************************************************************************
 bool IsReady() const;//Работоспособность предпроцессора
  //Количество входов предпроцессора с ОСНОВНЫМ каналом
 ulong In() const
 {return (this->IsReady()) ? this->SRF_GetElimDirs()+this->AUX_GetLAACh()+1 : 0L;};
 //Количество выходов предпроцессора с ОСНОВНЫМ каналом
 ulong Out() const {return (this->IsReady()) ? this->AUX_GetLAACh()+1 : 0L;};
 //Свойства предпроцессора в виде строкового объекта string
 string& Info(string& s, uint width = 80) const;

 //Расчет комплексных амплитуд на входе предпроцессора при действии источника сигнала
 //мощностью Power с направления Angle [в градусах]
 bool CalcInSignal(cvector& Us, double Power, double Angle, bool lBaseCh = ON) const;
 //Расчет комплексных амплитуд на входе предпроцессора при действии нескольких источников
 //сигнала (аддитивной помехи)
 bool CalcInSignal(cmatrix& Us, const TJammers_2D& Jams, bool lBaseCh = ON) const;
 //Расчет комплексных амплитуд на выходе предпроцессора при действии источника сигнала
 //мощностью Power с направления Angle [в градусах]
 bool CalcOutUs(cvector& OutUs, double Power, double Angle) const;

 //**************************************************************************************
 // Статистическое моделирование
 //**************************************************************************************
 //Расчет комплексных амплитуд на входе предпроцессора при действии источника сигнала
 //мощностью P с направления Phi [deg] со случайными составляющими амплитуды и фазы
 bool CalcInSignal(cvector& InUs, double P, double Phi, const TRandSignal& RandSignal) const;
 //Расчет комплексных амплитуд на выходе предпроцессора при действии источника сигнала
 //мощностью P с направления Phi [deg] со случайными составляющими амплитуды и фазы
 bool CalcOutSignal(cvector& OutUs, double P, double Phi, const TRandSignal& RandSignal) const;
 //Расчет комплексных амплитуд на входе предпроцессора при действии нескольких источников
 //сигнала (аддитивной помехи) со случайными гауссовыми составляющими
 bool CalcInUjam(cvector& InUjam, const TJammers_2D& Jams, TRandGen_64& RandGen) const;
 //Расчет комплексных амплитуд на выходе предпроцессора при действии нескольких источников
 //сигнала (аддитивной помехи) со случайными гауссовыми составляющими
 bool CalcOutUjam(cvector& OutUjam, const TJammers_2D& Jams, TRandGen_64& RandGen) const;
 //Расчет комплексных амплитуд внутреннего шума на входе предпроцессора со случайными
 //гауссовыми составляющими в приемных каналах предпроцессора
 bool CalcInUnoise(cvector& InUn, TRandGen_64& RandGen) const;
 //Расчет комплексных амплитуд внутреннего шума на выходе предпроцессора со случайными
 //гауссовыми составляющими в приемных каналах предпроцессора
 bool CalcOutUnoise(cvector& OutUn, TRandGen_64& RandGen) const;

 //Передаточная функция (Transfer function) предпроцессора /выход AuxCh + BaseChannel/
 bool TFunc(rmatrix& P, const TEvenCloseInterval& Sector, bool lSector = ON,
            bool lNorm = ON, bool lGroup = ON, bool dB = ON, double MindB = -60.0) const;
 bool TFunc(rmatrix& P, TSettingsTF& Settings) const;
 bool TFunc(cmatrix& U, const rvector& Angle, bool lBaseCh = OFF) const;

 //-------------------------------------------------------------------------------------
 //Расчет входных и выходных ковариационных матриц предпроцессора пространственного
 //фильтра для одного или нескольких источников сигнала (аддитивной помехи)
 //-------------------------------------------------------------------------------------
 //Расчет входной ковариационной матрицы предпроцессора для одного источника сигнала
 bool CalcInRss(cmatrix& InRss, double Power, double Angle) const;
 //Расчет выходной ковариационной матрицы предпроцессора для одного источника сигнала
 bool CalcOutRss(cmatrix& OutRss, double Power, double Angle) const;
 //Расчет входной ковариационной матрицы предпроцессора для аддитивного сигнала с учетом
 //внутреннего шума приемных каналов LAA
 bool CalcInRjn(cmatrix& InRjn, const TJammers_2D& Jams) const;
 //Расчет выходной ковариационной матрицы предпроцессора для аддитивного сигнала с учетом
 //внутреннего шума приемных каналов LAA
 bool CalcOutRjn(cmatrix& OutRjn, const TJammers_2D& Jams) const;
 //Расчет входной ковариационной матрицы внутреннего шума предпроцессора
 bool CalcInRnn(cmatrix& InRnn) const;
 //Расчет выходной ковариационной матрицы внутреннего шума предпроцессора
 bool CalcOutRnn(cmatrix& OutRnn) const;

 //-----------------------------------------------------------------------------
 //Линейная антенная решетка - LAA
 //-----------------------------------------------------------------------------
 bool LAA_IsReady() const;//Работоспособность LAA
 //Установка размера и отсчетного элемента LAA
 bool LAA_SetDimension(ulong N, ulong Origin);
 //Установка всех свойств LAA
 void LAA_Set(ulong DimLAA, ulong Origin, double RelDist, double Pn = 1.0);
 //Свойства LAA в виде строкового объекта string
 string& LAA_Info(string &s) const;

 //-----------------------------------------------------------------------------
 //Схема формирования ОСНОВНОГО канала - BaseChannel
 //-----------------------------------------------------------------------------
 ulong BFC_GetLAACh() const;//Число каналов LAA, подключенных к BFC
 //Угол сканирования при использовании лучеобразующей схемы
 double BFC_ScanAngle() const {return _ScanAngle;};
 //Установка нового угла сканирования в пределах [-90..+90] deg
 double BFC_SetScanAngle(double Angle);
 //Подключение не более N каналов LAA к BFC
 ulong BFC_SetChannels(ulong N);
 //Подключение к BaseChannel индексов каналов LAA, указанных в строке s
 ulong BFC_SetChannels(const string& s);
 ulong BFC_SetChannels(const char* str) {string s(str); return BFC_SetChannels(s);};
 //Установка свойств BFC
 bool BFC_Set(TLongSet& LAACh, double Angle);
 //Свойства схемы формирования ОСНОВНОГО канала в строковом виде
 string& BFC_Info(string& s) const;
 //Консольное редактирование схемы формирования ОСНОВНОГО канала
 bool BFC_Edit();
 //Вычисление уровня внутреннего шума ОСНОВНОГО канала
 double BFC_Pnoise() const;


 //-----------------------------------------------------------------------------
 //Дополнительные каналы пространственного фильтра - AuxCh
 //-----------------------------------------------------------------------------
 //Число каналов LAA, используемые как ДОПОЛНИТЕЛЬНЫЕ каналы SF
 ulong AUX_GetLAACh() const;
 //Назначение не более N каналов LAA в качестве ДОПОЛНИТЕЛЬНЫХ каналов SF
 ulong AUX_SetChannels(ulong N);
 //Назначение каналов LAA, указанных в строке s, как ДОПОЛНИТЕЛЬНЫХ каналов SF
 ulong AUX_SetChannels(const string& s);
 ulong AUX_SetChannels(const char* str) {string s(str); return AUX_SetChannels(s);};
 //Назначение ДОПОЛНИТЕЛЬНЫХ каналов SF, передаваемых в контейнере LAACh
 bool AUX_Set(TLongSet& LAACh);
 //Количество и номера дополнительных каналов SF в строковом виде
 string& AUX_Info(string& s) const;
 //Консольный ввод номеров каналов LAA, используемых как ДОПОЛНИТЕЛЬНЫЕ каналы SF
 bool AUX_Edit();

 //------------------------------------------------------------------------------
 //Пространственный режекторный фильтр - SRF
 //------------------------------------------------------------------------------
 //Число направлений исключения, формируемых SRF, в ДОПОЛНИТЕЛЬНЫХ каналах SF
 ulong SRF_GetElimDirs() const {return this->_ElimDirects.Size();};
 //Установка направлений исключения
 ulong SRF_SetElimDirs(const TDoubleSet& ElimDirs);
 ulong SRF_SetElimDirs(const string& s);
 ulong SRF_SetElimDirs(const char* str) {string s(str); return SRF_SetElimDirs(s);};
 //Установка типа SRF
 bool SRF_SetUnit(uint UnitType);
 //Установка всех характеристик SRF
 bool SRF_Set(const TDoubleSet& ElimDirs, bool lUseBaseCh, uint UnitType);
 bool SRF_Set(const string& sElimDirs, bool lUseBaseCh, uint UnitType);
 bool SRF_Set(const char* cpElimDirs, bool lUseBaseCh, uint UnitType)
 {string sElimDirs(cpElimDirs); return SRF_Set(sElimDirs,lUseBaseCh,UnitType);};
 //Свойства пространственного режекторного фильтра в строковом виде
 string& SRF_GetUnit(string& s) const;
 string& SRF_GetElimDirs(string& s) const;
 string& SRF_GetWorkCh(string& s) const;
 string& SRF_Info(string& s) const;
 //Консольное редактирование свойств SRF (схема формирования нулей в диаграммах направлен-
 //ности дополнительных каналов SF в направлениях задаваемых пользователем)
 bool SRF_Edit();

 //---------------------------------------------------------------------------------------
 // ДРУЖЕСТВЕННЫЕ ФУНКЦИИ КЛАССА TPreProcessor_MISO_SF
 //---------------------------------------------------------------------------------------
 //Перегрузка оператора вывода (<<) для вывода параметров класса
 friend ostream& operator <<(ostream& out, const TPreProcessor_MISO_SF& Obj);
 //Ввод параметров объекта из стандартного потока ввода cin
 friend void Edit(TPreProcessor_MISO_SF& Obj);


 //------------------------------------------------------------------------------
 // II. ОБЪЯВЛЕНИЕ ЗАЩИЩЕННЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TPreProcessor_MISO_SF
 //------------------------------------------------------------------------------
 protected:
  void Init();//Начальная инициализация предпроцессора при конструировании
  void Reset();//Сброс всех параметров предпроцессора

  //-----------------------------------------------------------------------------
  //Схема формирования ОСНОВНОГО канала - BaseChannel
  //-----------------------------------------------------------------------------
  void BFC_Init();//Начальная инициализация параметров ОСНОВНОГО канала
  void BFC_Reset();//Сброс параметров схемы формирования ОСНОВНОГО канала
  //Проверка на подключение к BFC одного канала LAA
  bool BFC_UseSingleCh() const {return (_BaseCh.Size() == 1) ? true : false;};
  //Проверка на подключение к BFC одного канала LAA с присвоением его номера переменной index
  bool BFC_UseSingleCh(long& index) const;
  //Проверка на подключение к BFC всех каналов LAA
  bool BFC_UseAllCh() const
  {return (this->LAA_IsReady() && _BaseCh.IsEmpty()) ? true : false;};
  //Обновление свойств BaseChannel при изменении свойств LAA
  void BFC_Update();
  //Расчет комплексного напряжения на выходе BFC при действии источника сигнала мощностью
  //Power с направления Angle (в градусах)
  complex BFC_CalcUs(double Power, double Angle) const;
  //Расчет комплексного напряжения на выходе BFC при действии источника сигнала мощностью
  //P с направления Phi (в градусах) со случайными амплитудой и фазой
  complex BFC_CalcUs(double P, double Phi, const TRandSignal& RandSignal) const;
  //Расчет комплексного напряжения внутреннего шума на выходе BFC со случайными составляю-
  //щими амплитуды и фазы в приемных каналах предпроцессора, подключенных к BFC
  complex BFC_CalcUnoise(const RandSignalVect& RandNoise) const;

  //-----------------------------------------------------------------------------
  //Дополнительные каналы пространственного фильтра - AuxCh
  //-----------------------------------------------------------------------------
  void AUX_Init();//Начальная инициализация дополнительных каналов
  void AUX_Reset();//Сброс дополнительных каналов
  //Проверка на использование всех каналов LAA как ВСПОМОГАТЕЛЬНЫХ каналов Space Filter
  bool AUX_UseAllCh() const
  {return (this->LAA_IsReady() && _AuxCh.IsEmpty()) ? true : false;};
  //Максимально число каналов LAA, которые можно использовать как AuxChannel
  ulong AUX_GetMaxLAACh() const;

  //Обновление каналов AuxCh при изменении свойств LAA или BaseChannel
  void AUX_Update();

  //------------------------------------------------------------------------------
  //Пространственный режекторный фильтр - SRF
  //------------------------------------------------------------------------------
  void SRF_Init();//Начальная инициализация параметров SRF
  void SRF_Reset();//Сброс параметров SRF
  bool SRF_IsReady() const;//Использование SRF предпроцессором (опционально)
  //Использование ОСНОВНОГО канала SRF в качестве РАБОЧЕГО канала
  bool SRF_UseBaseCh() const {return this->_lUseBaseCh;};
  //Число каналов LAA, которые можно использовать как РАБОЧИЕ каналы, без учета номера
  //ОСНОВНОГО канала (при подключении одного канала LAA к BaseChannel)
  ulong SRF_GetMaxWorkCh() const;
  //Максимальное количество направлений исключения с учетом использования BaseCh
  ulong SRF_GetMaxElimDirs() const;
  uint SRF_GetUnit() const;//Тип SRF
  //Обновление параметров SRF, связанных с изменением/установкой направлений исключения
  bool SRF_ElimDirsUpdate();
  //Обновление параметров SRF, связанных с изменением типа фильтра или переустановкой
  //направлений исключения
  bool SRF_UnitUpdate(uint UnitType);
  //Обновление свойств SRF при изменении свойств LAA, BaseChannel или AuxCh
  void SRF_Update();

};//Завершение объявления класса TPreProcessor_MISO_SF

//****************************************************************************************
//          Объявление абстрактного класса TAuxChSpaceRejectFilter
//****************************************************************************************
//Класс является БАЗОВЫМ для создания классов ПРОСТРАНСТВЕННЫХ РЕЖЕКТОРНЫХ ФИЛЬТРОВ ДОПОЛ-
//НИТЕЛЬНЫХ КАНАЛОВ АДАПТИВНОГО ПРОСТРАНСТВЕННОГО ФИЛЬТРА с ОСНОВНЫМ КАНАЛОМ. Назначение
//класса состоит в исключении заданных направлений приема сигналов в дополнительных каналах
//адаптивного пространственного фильтра.
//Режекторный фильтр представляет собой весовой сумматор с постоянными коэффициентами с M
//входами и N выходами (M > N). Классифицируются по схемам построения весовых сумматоров и
//бывают двух видов: МНОГОСТУПЕНЧАТЫЕ (MultiStage) и ОДНОСТУПЕНЧАТЫЕ (SingleStage).
//Одноступенчатый режекторный пространственный фильтр представляет собой совокупность
//одноступенчатых весовых сумматоров, количество которых равно N. Каждый такой сумматор
//имеет M-N+1 число входов и ОДИН выход.
//Многоступенчатый режекторный пространственный фильтр представляет собой один многоступен-
//чатый весовой сумматор с M входами и N выходами.
//Разность M-N определяет количество направлений исключения, которое может реализовать фильтр.
//Каждый рабочий канал фильтра обеспечивает реализацию одного направления исключения приема
//сигналов в дополнительных каналах адаптивного пространственного фильтра с выделенным ка-
//налом. Алгоритмы настройки коэффициентов режекторного фильтра зависит от его схемной реа-
//лизации. Для расчета коэффициентов режекторного фильтра, независимо от его схемной реали-
//зации, при конструировании объекта передается комплексная матрица размерностью MxK, где
//M+1 - количество входов фильтра, K - число направлений исключения. Число выходов фильтра
//N = M+1-K. Для повышения скорости вычислений в режекторный фильтр дополнительных каналов
//вводится ОСНОВНОЙ канал, который не изменяется режекторным фильтром. Так как ОСНОВНОЙ
//канал не изменяется фильтром, то в обучающую матрицу его значения не включаются.
//Обучающая матрица представляет собой K векторов размерностью M. В матрице размещаются
//комплексные значения напряжений приемных каналов LAA, которые подключаются к режекторному
//фильтру, при действии ЕДИНИЧНЫХ источников сигналов с каждого из K направлений исключения.
//Первые K строк соответствуют РАБОЧИМ каналам режекторного фильтра, остальные N строк -
//каналам LAA, используемым как ДОПОЛНИТЕЛЬНЫЕ. Отметим, что данный класс не содержит инфор-
//мации по направлениям исключения, индексам каналов LAA, которые к нему подключены и опции
//подключения ОСНОВНОГО канала как рабочего канала режекторного фильтра. Класс является
//исполнительным механизмом, реализующим исключение приема сигналов с заданных направлений
//в дополнительных каналах Adaptive SpaceFilter with BaseChannel. Исключение направлений
//приема в дополнительных каналах адаптивного фильтра с основным каналом приводит к невоз-
//можности подавления источников сигналов с заданных направлений, что в ряде случаев оказы-
//вается необходимым. Структура обучающей матрицы для реализации пространственного режектор-
//ного фильтра для 4-х дополнительных каналов и 3-х направлений исключения будет иметь
//следующий вид: N = 4; K = 3; M = 7.
//Размерность A: rows = M = 7; cols = K = 3.
//     | U11 U12 U13 |  Uij - комплексное напряжение в i-ом канале при действии
//     | U21 U22 U23 |        одного источника сигнала ЕДИНИЧНОЙ мощности с j-го
//     | U31 U32 U33 |        направления исключения;
// A = | U41 U42 U43 |  U1j..U3j - рабочие каналы AuxChSpaceRejectFilter;
//     | U51 U52 U53 |  U4j..U7j - дополнительные каналы AdaptSpaceFilterBaseCh
//     | U61 U62 U63 |
//     | U71 U72 U73 |
//Следует отметить, что включение ОСНОВНОГО канала в качестве рабочего канала режекторного
//фильтра, позволяет уменьшить уровень внутреннего шума.
//Весовые коэффициенты, рассчитанные по "обучающей" матрице A помещаются в матрицу весовых
//коэффициентов Q. Структура размещения коэффициентов фильтра и размерность матрицы Q зави-
//сит от схемной реализации фильтра.
//На вход фильтра можно подавать вектор U или корреляционную матрицу R входного воздействия
//размерности M+1[BaseCh]. На выходе получается вектор U' или матрица R' размерности
//N+1[BaseCh]. Значение ОСНОВНОГО канала всегда должно находится последним в векторе U и
//последовательность каналов на входе режекторного фильтра должна соответствовать последо-
//вательности каналов "обучающей" матрицы. При ином расположении каналов режекция осуществ-
//ляться не будет. Кроме того, на вход режекторного фильтра м.б. подан только комплексный
//вектор напряжений или корреляционная матрица размерности M+1. При иной размерности возв-
//ращается выходной вектор или матрица нулевого размера.
//Детали реализации алгоритма  вычисления коэффициентов режекторного пространственного
//фильтра и структура хранения коэффициентов зависит от схемной реализации MultiStage или
//SingleStage и будут описаны в данных классах.
//****************************************************************************************
class TAuxChSpaceRejectFilter {
//------------------------------------------------------------------------------
// Объявление защищенных членов-данных класса TAuxChSpaceRejectFilter
//------------------------------------------------------------------------------
protected:
 ulong Input;//Количество входов фильтра
 ulong Output;//Количество выходов фильтра
//------------------------------------------------------------------------------
//ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ и ДЕСТРУКТОРА КЛАССА TAuxChSpaceRejectFilter
//------------------------------------------------------------------------------
public:
 //Конструктор по умолчанию
 TAuxChSpaceRejectFilter() {Reset();};
 //Конструктор с аргументами
 TAuxChSpaceRejectFilter(const cmatrix& A) {Tuning(A);};
 //Объявление деструктора класса
 virtual ~TAuxChSpaceRejectFilter() {Reset();};
//------------------------------------------------------------------------------
//Объявление общедоступных членов-функций класса TAuxChSpaceRejectFilter
//------------------------------------------------------------------------------
public:
 //Определение работоспособности режекторного фильтра
 bool IsReady() const {return (Input != 0L) ? true : false;};
 ulong In() const {return Input;};//Количество входов режекторного фильтра
 ulong Out() const {return Output;};//Количество выходов режекторного фильтра
 //Количество направлений исключения (режекции)
 ulong Directs() const {return Input-Output;};

 //-----------------------------------------------------------------------------
 //Передаточная функция (TRANSFER FUNCTION) TAuxChSpaceRejectFilter
 //-----------------------------------------------------------------------------
 virtual bool TFunc(const cmatrix& InR, cmatrix& OutR) const = 0;
 virtual bool TFuncDM(const cmatrix& InR, cmatrix& OutR) const = 0;
 virtual bool TFunc(const cvector& InV, cvector& OutV) const = 0;

 bool operator ()(const cmatrix& InR, cmatrix& OutR) const
      {return TFunc(InR, OutR);};
 bool operator ()(const cvector& InV, cvector& OutV) const
      {return TFunc(InV, OutV);};
 //-----------------------------------------------------------------------------
 //Настройка весовых коэффициентов режекторного пространственного фильтра
 //-----------------------------------------------------------------------------
 virtual bool Tuning(const cmatrix& A) = 0;
 //-----------------------------------------------------------------------------
 //Получение весовых коэффициентов TAuxChSpaceRejectFilter
 //-----------------------------------------------------------------------------
 virtual bool GetW(cmatrix& W, bool lExtend = ON) const = 0;
 //-----------------------------------------------------------------------------
 //Консольный ввод-вывод свойств класса
 //-----------------------------------------------------------------------------
 virtual uint Type() const = 0;//Тип весового сумматора
 virtual string& Type(string& s) const = 0;//Тип весового сумматора
 //Сокращенное наименование класса
 virtual string& Clip(string& s) const = 0;
 //Формирование конфигурации AuxChSpaceRejectFilter в виде символьной строки:
 //< <Input> x <Output>;\n >
 string& GetConfig(string& s) const
 {char buffer[80]; ostrstream text (buffer, sizeof(buffer));
  text << In() << " x " << Out() << ";" << endl << ends;
  s.append(text.str()); text.seekp(0);
  return s;
 };
 //Формирование свойств весового сумматора в виде символьной строки
 virtual string& Properties(string& s, string& head, uint indent = 0) const = 0;

 //Перегрузка операции потокового вывода (<<) свойств класса
 friend ostream& operator <<(ostream& out, const TAuxChSpaceRejectFilter& SRF)
 {string s; return out << SRF.Properties(s,STR_NULL);};
//------------------------------------------------------------------------------
//Объявление защищенных членов-функций класса TAuxChSpaceRejectFilter
//------------------------------------------------------------------------------
protected:
 //Начальная установка параметров режекторного фильтра
 void Reset() {Input = 0L; Output = 0L;};
};//Завершение объявления класса TAuxChSpaceRejectFilter
//------------- Завершение объявления класса TAuxChSpaceRejectFilter -----------

//****************************************************************************************
//          Объявление класса TMultiStageAuxChSRF
//****************************************************************************************
//Класс реализует модель МНОГОСТУПЕНЧАТОГО ПРОСТРАНСТВЕННОГО РЕЖЕКТОРНОГО ФИЛЬТРА ДОПОЛНИ-
//ТЕЛЬНЫХ КАНАЛОВ АДАПТИВНОГО ПРОСТРАНСТВЕННОГО ФИЛЬТРА с ОСНОВНЫМ КАНАЛОМ. Назначение
//класса состоит в исключении заданных направлений приема сигналов дополнительными каналами
//адаптивного пространственного фильтра.
//Режекторный фильтр представляет собой многоступенчатый весовой сумматор с постоянными
//коэффициентами с M входами и N выходами (M > N).
//Разность M-N определяет количество направлений исключения, которые фильтр реализует. Каж-
//дый рабочий канал фильтра обеспечивает одно направление исключения приема сигналов в до-
//полнительных каналах адаптивного пространственного фильтра с выделенным каналом. Для рас-
//чета коэффициентов режекторного фильтра при конструировании объекта передается комплексная
//"обучающая" матрица размерностью MxK, где M+1 - количество входов фильтра, K - число на-
//правлений исключения. Число выходов фильтра N = M+1-K. Обучающая матрица представляет K
//векторов размерностью M. Структура матрица описана в классе TAuxChSpaceRejectFilter.
// АЛГОРИТМ Q-ПРЕОБРАЗОВАНИЯ, ВЫЧИСЛЕНИЯ  ВЕСОВЫХ КОЭФФИЦИЕНТОВ МНОГОСТУПЕНЧАТОГО ФИЛЬТРА
//                            и СХЕМА ХРАНЕНИЯ КОЭФФИЦИЕНТОВ
//Коэффициенты фильтра хранятся в матрице Q. Размерность матрицы Q складывается:
//1. RDEChannel (каналы LAA используемые для исключения приема сигналов с заданных направ-
//   лений вспомогательными каналами фильтра);
//2. AuxChannel (дополнительные каналы фильтра, подключаемые с LAA);
//3. BaseChannel размерности 1 (основной канал фильтра).
//Матрица Q хранит коэффициенты в упакованном виде. Для исключения приема сигналов с N
//направлений необходимо 2*N элементарных матриц специального вида:
// R' = Qn*Qn-1*...*Q2*Q1*R*trQ1*trQ2*...*trQn-1*trQn, где
// R - входная корреляционная матрица;
// R' - преобразованная корреляционная матрица с N исключенными направлениями;
// Qn,Qn-1,...,Q2,Q1 - комплексные элементарные матрицы специального вида с коэффициентами
// исключения для каждого канала для N-направлений. Данные матрицы - НИЖНИЕ СТОЛБЦОВЫЕ
// ЭЛЕМЕНТАРНЫЕ МАТРИЦЫ;
// trQ1,trQ2,...,trQn-1,trQn - транспонированные к Q1,tQ2,...,Qn-1,Qn матрицы весовых коэф-
// фициентов. Данные матрицы - ПРАВЫЕ СТРОЧНЫЕ ЭЛЕМЕНТАРНЫЕ МАТРИЦЫ.
//Данная особенность позволяет хранить все 2*N матриц в одной матрице Q. Реализованные в
//классах cvector и cmatrix операции умножения на элементарные матрицы специального вида
//с учетом компактной формы их хранения в одной матрице позволяют корректно и быстро вы-
//полнять необходимые операции для исключения заданных направлений исключения из входных
//корреляционных матриц и векторов  сигналов.
//Для задания N направлений исключения приема сигналов в дополнительных каналах фильтра
//используются N каналов LAA, индексы которых не должны совпадать с индексами каналов LAA,
//которые используются как дополнительные каналы пространственного фильтра с выделенным
//каналом. В основном канале подавление приема сигналов с заданных направлений не должно
//происходить, поэтому в матрице Q последняя строка и последний столбец содержат нулевые
//коэффициенты, за исключением последнего элемента матрицы (на пересечении последних столбца
//и строки) равного 1. Если не задано ни одного направления исключения, матрица Q должна
//быть ЕДИНИЧНОЙ.
//Коэффициенты Space Reject Filter обеспечивают нулевые уровни приема сигналов с направле-
//ний исключения в AuxCh. Таким образом, обеспечивается передача сигналов с направлений
//исключения только через ОСНОВНОЙ КАНАЛ без его компенсации на весовом сумматоре адаптив-
//ного фильтра. Коэффициенты для всех ДОПОЛНИТЕЛЬНЫХ КАНАЛОВ и ОДНОГО НАПРАВЛЕНИЯ ИСКЛЮЧЕ-
//НИЯ рассчитываются относительно ОДНОГО RDE КАНАЛА, который подключается с АР к
//MultiStageAuxChSRF и не должен совпадать ни с одним AuxCh. Для расчета коэффициентов для
//всех AuxCh и другого направления исключения должен быть задействован другой рабочий канал
//SRF и так  далее. Методика вычисления коэффициентов следующая:
//1. Формируется сигнал ЕДИНИЧНОЙ МОЩНОСТИ, приходящий с ПЕРВОГО НАПРАВЛЕНИЯ ИСКЛЮЧЕНИЯ, и
// рассчитываются комплексные значения напряжений на каналах LAA, подключенных к
// MultiStageAuxChSRF. К этим каналам относятся RDECh и AuxCh.
// Комплексные коэффициенты для ПЕРВОГО НАПРАВЛЕНИЯ исключения рассчитываются по формуле:
// Q(i,0) = - Ui/U0, Q(0,i) = conj(Q(i,0)),  0 < i < LAACh
// Q(i,0) - коэффициент SRF для i-го канала LAA, подключенного к нему, для первого направ-
// ления исключения;
// Ui - комплексное напряжение i-го канала LAA, подключенного к AuxChRDEUnit,
// при действии источника единичной мощности с первого направления исключения;
// U0 - комплексное напряжение 1-го рабочего канала RDECh, которое обеспечивает исключение
// направления приема сигнала с первого направления в остальных каналах подключенных к
// AuxChRDEUnit.
// 2. Алгоритм расчета для j-го направления исключения (0 < j <= N). Формируется сигнал
// ЕДИНИЧНОЙ МОЩНОСТИ с j-го направления исключения и формируется вектор комплексных напря-
// жений на каналах LAACh, подключенных к SRF. Полученный вектор U умножается на последо-
// вательность левых столбцовых элементарных  матриц Lkc: U' = Lj-1c*...*L1c*L0c*U. В ре-
// зультате вектор U изменяется на вектор U', из данного вектора исключаются источники сиг-
// нала с 0..j-1 направлений исключения. Коэффициенты для j-го направления исключения рас-
// считываются аналогично п.1 по формуле: Q(i,j)=-U'i/U'j, Q(j,i)=conj(Q(i,j)), j<i<LAACh
// Q(i,j) - коэффициент SRF для i-го канала LAA, подключенного к нему, для j-го направления
// исключения;
// U'i - комплексное напряжение i-го канала LAA, подключенного к AuxChSRF, при действии
// источника единичной мощности с j-го направления исключения;
// U'j - комплексное напряжение j-го рабочего канала RDECh, которое обеспечивает исключение
// направления приема сигнала с j-го направления в остальных каналах подключенных к AuxChSRF.
// Выполнение п.2 продолжается для расчета всех N направлений исключения.
// ПРИМЕЧАНИЕ: В классе осуществляется только расчет весовых коэффициентов SRF. Тестовые
// сигналы для каналов LAA и ОСНОВНОГО канала (при его подключении), которые подключены к
// AuxChSRF, и заданных направлениях исключения передаются в обучающей матрице A. За форми-
// рование данной матрицы ответственен класс, который использует объект класса TMultiStage-
// AuxChSRF. Класс TMultiStageAuxChSRF выполняет только проверку корректности по размерности
// матрицы A. Матрица A не должна быть нулевой и число строк матрицы должно быть строго
// больше числа столбцов матрицы. В противном случае, объект класса не будет работоспособным.
// Приведем обобщенную структуру матрицы Q для схемы AuxChRDEUnit для трех направлений
// исключения и пространственного фильтра с основным каналом и 5 дополнительными каналами.
// Таким образом, RDECh = 3, AuxCh = 5, Dimension Q = 9x9 (с учетом включения ОСНОВНОГО
// КАНАЛА). Матрица Q будет иметь следующий вид:
//       U0  U1  U2  U3  U4  U5  U6  U7  U8
//     |  1  q01 q02 q03 q04 q05 q06 q07  0| U0
//     | q10  1  q12 q13 q14 q15 q16 q17  0| U1
//     | q20 q21  1  q23 q24 q25 q26 q27  0| U2
//     | q30 q31 q32  1   0   0   0   0   0| U3
// Q = | q40 q41 q42  0   1   0   0   0   0| U4
//     | q50 q51 q52  0   0   1   0   0   0| U5
//     | q60 q61 q62  0   0   0   1   0   0| U6
//     | q70 q71 q72  0   0   0   0   1   0| U7
//     |  0   0   0   0   0   0   0   0   1| U8
// U0..U2 - RDECh, U3..U7 - AuxCh, U8 - BaseChannel.
//С целью минимизации числа неиспользуемых при вычислениях элементов матрицы Q, она разби-
//вается на две прямоугольные матрицы Q и trQ. Матрицы Q и trQ будут иметь следующий вид:
//       U0  U1  U2
//     |  1   0   0  | U0
//     | q10  1   0  | U1
//     | q20 q21  1  | U2          U0  U1  U2  U3  U4  U5  U6  U7
//     | q30 q31 q32 | U3         | 1  q01 q02 q03 q04 q05 q06 q07 | U0
// Q = | q40 q41 q42 | U4   trQ = | 0   1  q12 q13 q14 q15 q16 q17 | U1
//     | q50 q51 q52 | U5         | 0   0   1  q23 q24 q25 q26 q27 | U2
//     | q60 q61 q62 | U6
//     | q70 q71 q72 | U7
// U0..U2 - RDECh, U3..U7 - AuxCh.
//В качестве входного воздействия могут использоваться комплексные корреляционная матрица
//R или вектор напряжений U с компонентой ОСНОВНОГО канала адаптивного фильтра. При Q-пре-
//образовании проверяется работоспособность фильтра и соответствие размерности входного
//воздействия размерности пространственного режекторного фильтра. При их несоответствии
//или неработоспособности фильтра возвращается вектор или матрица нулевого размера.
//Размерность входного вектора должна быть равна числу входов фильтра. Матрица R должна
//быть квадратной и с размерностью равной числу входов SRF. В качестве выходного значения
//объект класса возвращает вектор или квадратную матрицу с размерностями равными числу
//выходов Space Reject Filter.
//****************************************************************************************
class TMultiStageAuxChSRF : public TAuxChSpaceRejectFilter {
//---------------------------------------------------------------------------------------
// Объявление защищенных членов-данных класса TMultiStageAuxChSRF
//---------------------------------------------------------------------------------------
protected:
 cmatrix Q;//Матрица Q-преобразования
 cmatrix trQ;//Матрица сопряженно-транспонированная к матрице Q
//------------------------------------------------------------------------------
//ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ и ДЕСТРУКТОРА КЛАССА TMultiStageAuxChSRF
//------------------------------------------------------------------------------
public:
 //Конструктор по умолчанию
 TMultiStageAuxChSRF() {Reset();};
 //Конструктор с аргументами
 TMultiStageAuxChSRF(const cmatrix& A) {Tuning(A);};
 //Объявление деструктора класса
 ~TMultiStageAuxChSRF() {Reset();};
//------------------------------------------------------------------------------
//Объявление общедоступных членов-функций класса TMultiStageAuxChSRF
//------------------------------------------------------------------------------
public:
 //-----------------------------------------------------------------------------
 //Передаточная функция (TRANSFER FUNCTION) TMultiStageAuxChSRF
 //-----------------------------------------------------------------------------
 bool TFunc(const cmatrix& InR, cmatrix& OutR) const;
 bool TFuncDM(const cmatrix& InR, cmatrix& OutR) const;
 bool TFunc(const cvector& InV, cvector& OutV) const;
 //-----------------------------------------------------------------------------
 //Настройка весовых коэффициентов режекторного пространственного фильтра
 //-----------------------------------------------------------------------------
 bool Tuning(const cmatrix& A);
 //-----------------------------------------------------------------------------
 //Получение весовых коэффициентов TMultiStageAuxChSRF
 //-----------------------------------------------------------------------------
 bool GetW(cmatrix& W, bool lExtend = ON) const;
 //-----------------------------------------------------------------------------
 //Консольный ввод-вывод свойств класса TMultiStageAuxChSRF
 //-----------------------------------------------------------------------------
 uint Type() const {return MultiStageUnit;};//Тип весового сумматора
 //Тип весового сумматора
 string& Type(string& s) const
 {return s = "MultiStage Space Reject Filter of the Auxiliary Channels";};
 //Сокращенное наименование класса
 string& Clip(string& s) const {return s = "MultiStageAuxChSRF";};
 //Формирование свойств весового сумматора в виде символьной строки
 string& Properties(string& s, string& head, uint indent = 0) const;
 //Перегрузка операции потокового вывода (<<) свойств класса
 friend ostream& operator <<(ostream& out, const TMultiStageAuxChSRF& SRF)
 {string s; return out << SRF.Properties(s,STR_NULL);};

//------------------------------------------------------------------------------
//Объявление защищенных членов-функций класса TMultiStageAuxChSRF
//------------------------------------------------------------------------------
protected:
 //Начальная установка параметров режекторного фильтра
 void Reset() {Input = 0L; Output = 0L; Q = cmatrix(); trQ = cmatrix();};
};//Завершение объявления класса TMultiStageAuxChSRF
//------------- Завершение объявления класса TMultiStageAuxChSRF ---------------

//******************************************************************************
//          Объявление класса TSingleStageAuxChSRF
//******************************************************************************
//Класс реализует модель ОДНОСТУПЕНЧАТОГО ПРОСТРАНСТВЕННОГО РЕЖЕКТОРНОГО ФИЛЬТРА
//ДОПОЛНИТЕЛЬНЫХ КАНАЛОВ АДАПТИВНОГО ПРОСТРАНСТВЕННОГО  ФИЛЬТРА с ОСНОВНЫМ КАНА-
//ЛОМ. Назначение класса состоит в исключении заданных направлений приема сигна-
//лов  дополнительными каналами адаптивного пространственного фильтра. Режектор-
//ный фильтр представляет собой совокупность одноступенчатых весовых сумматоров,
//количество  которых  равно N. Каждый такой сумматор имеет M-N+1 число входов и
//ОДИН выход (N - число AuxCh+BaseCh, M - RDECh+AuxCh+BaseCh, K = M-N - число
//направлений исключения.
//Разность M-N определяет количество направлений исключения, которое может реали-
//зовать данный фильтр. Каждый рабочий канал фильтра обеспечивает реализацию од-
//ного направления исключения приема сигналов в дополнительных каналах  адаптив-
//ного пространственного фильтра с выделенным каналом. Для расчета коэффициентов
//режекторного фильтра, при конструировании объекта передается комплексная "обу-
//чающая" матрица размерностью MxK, где M+1 - количество входов фильтра, K - чис-
//ло направлений исключения. Число выходов фильтра N = M+1-K. Обучающая  матрица
//представляет  собой K векторов размерностью M. Структура матрица описана в ро-
//дительском классе TAuxChSpaceRejectFilter.
//АЛГОРИТМ Q-ПРЕОБРАЗОВАНИЯ, ВЫЧИСЛЕНИЯ  ВЕСОВЫХ КОЭФФИЦИЕНТОВ  ОДНОСТУПЕНЧАТОГО
//                    ФИЛЬТРА и СХЕМА ХРАНЕНИЯ КОЭФФИЦИЕНТОВ
//Коэффициенты  фильтра  хранятся в матрицах Q и trQ. Матрица trQ является комп-
//лексно-сопряженной к матрице Q и осуществляет вместе с матрицей Q Q-преобразо-
//вание  корреляционной матрицы входного воздействия. Матрица Q является прямоу-
//гольной. Размерность матрицы Q по столбцам:
//1. RDEChannel (каналы LAA используемые для исключения приема сигналов с задан-
//   ных направлений вспомогательными каналами фильтра);
//2. AuxChannel (дополнительные каналы фильтра, подключаемые с LAA);
//3. BaseChannel размерности 1 (основной канал фильтра).
//Размерность матрицы Q по строкам:
//1. AuxChannel (дополнительные каналы фильтра, подключаемые с LAA);
//2. BaseChannel размерности 1 (основной канал фильтра).
//Каждая строка матрицы Q представляет собой коэффициенты одного одноступенчато-
//го весового сумматора, который представляет из себя пространственный режектор-
//ный фильтр на K направлений для ОДНОГО ДОПОЛНИТЕЛЬНОГО канала. Последняя стро-
//ка матрицы Q является вектором весовых коэффициентов для ОСНОВНОГО канала, все
//коэффициенты этой строки, за исключением последнего (равного 1), равны 0, т.к.
//в ОСНОВНОМ канале пространственная фильтрация не должна осуществляться.
//Для осуществления Q-преобразования необходимо вектор входного сигнала умножить
//слева на  матрицу Q: V' = Q*V. Для осуществления Q-преобразования над корреля-
//ционной матрицей входного сигнала R необходимо провести следующую операцию:
//R' = Q*R*trQ.
//Для задания K направлений исключения приема  сигналов с  заданных  направлений
//дополнительными каналами фильтра  используются  K каналов LAA, индексы которых
//не должны совпадать с индексами каналов LAA, которые используются как дополни-
//тельные  каналы пространственного фильтра с выделенным каналом.
//Коэффициенты Space Reject Filter обеспечивают нулевые уровни приема сигналов с
//направлений исключения в AuxCh. Таким образом, обеспечивается  передача сигна-
//лов с направлений исключения только через ОСНОВНОЙ КАНАЛ без его компенсации
//на весовом сумматоре адаптивного фильтра. Методика вычисления коэффициентов
//одноступенчатых режекторных пространственных фильтров следующая:
//1. Формируются сигналы ЕДИНИЧНОЙ МОЩНОСТИ, приходящие с K НАПРАВЛЕНИЙ ИСКЛЮЧЕ-
// НИЯ, и рассчитываются комплексные значения напряжений на каналах LAA,
// подключенных к SingleStageAuxChSRF. К этим каналам относятся RDECh и AuxCh.
// Тестовые сигналы для каналов LAA и ОСНОВНОГО канала (при его подключении),
// которые подключены к AuxChSRF, и заданных направлениях исключения передаются
// в обучающей матрице L. За формирование данной матрицы ответственен класс, ко-
// торый использует объект класса TSingleStageAuxChSRF. Класс TSingleStageAuxChSRF
// выполняет только проверку корректности по размерности матрицы L. Матрица L не
// должна быть нулевой и число строк матрицы должно быть строго больше числа
// столбцов матрицы. В противном случае, объект класса не будет работоспособным.
// Структура обучающей матрицы  для  реализации  пространственного  режекторного
// фильтра  для 4-х  дополнительных  каналов и 3-х направлений  исключения будет
// иметь следующий вид: N = 4; K = 3; M = 7.
//Размерность L: rows = M = 7; cols = K = 3.
//     | U11 U12 U13 |  Uij - комплексное напряжение в i-ом канале при действии
//     | U21 U22 U23 |        одного источника сигнала ЕДИНИЧНОЙ мощности с j-го
//     | U31 U32 U33 |        направления исключения;
// L = | U41 U42 U43 |  U1j..U3j - рабочие каналы AuxChSpaceRejectFilter;
//     | U51 U52 U53 |  U4j..U7j - дополнительные каналы AdaptSpaceFilterBaseCh
//     | U61 U62 U63 |
//     | U71 U72 U73 |
// 2. На основе матрицы L строится система линейных алгебраических уравнений с N
// правыми частями (по числу AuxCh или числу одноступенчатых сумматоров) следую-
// щего вида: A*W = B, где A - подматрица матрицы L с коэффициентами Uij для ра-
// бочих  каналов  фильтра; В - подматрица  матрицы L с  коэффициентами Uij  для
// вспомогательных каналов AuxCh; W - матрица весовых коэффициентов для N одно-
// ступенчатых сумматоров, которая рассчитывается. Для данной матрицы L СЛАУ с
// N правыми частями записывается следующим образом:
// U11*W1 + U21*W2 + U31*W3 = -U41 -U51 -U61 -U71
// U12*W1 + U22*W2 + U32*W3 = -U42 -U52 -U62 -U72
// U13*W1 + U23*W2 + U33*W3 = -U43 -U53 -U63 -U73
// При решении данной системы уравнений получаем коэффициенты матрицы W:
//     | w11 w12 w13 w14 |
// W = | w21 w22 w23 w24 |
//     | w31 w32 w33 w34 |
// Столбцы матрицы W содержат весовые коэффициенты для 4-x одноступенчатых прос-
// ранственных режекторных фильтра, которые обеспечивают по 3 направления исклю-
// чения в 4-х дополнительных  каналах  адаптивного  пространственного фильтра с
// ОСНОВНЫМ каналом.
// Отметим, что для обеспечения правильной работы пространственного режекторного
// фильтра после его настройки, последовательность каналов LAA и BaseCh (при его
// использовании) должна быть аналогичной как и в обучающей матрице L.
// Коэффициенты матрицы W являются частью коэффициентов матрицы Q. Приведем мат-
// рицу Q для схемы AuxChRDEUnit с тремя направлениями исключения для адаптивно-
// го пространственного фильтра с основным каналом и 4 дополнительными каналами.
// Таким образом, RDECh = 3, AuxCh = 4, Dimension Q = (3+4+1)x(4+1) = 8x5
// (с учетом включения ОСНОВНОГО КАНАЛА). Матрица Q будет иметь следующий вид:
//       U0  U1  U2  U3  U4  U5  U6  U7
//     | w11 w21 w31  1   0   0   0   0 | U3
//     | w12 w22 w32  0   1   0   0   0 | U4
// Q = | w13 w23 w33  0   0   1   0   0 | U5
//     | w14 w24 w34  0   0   0   1   0 | U6
//     |  0   0   0   0   0   0   0   1 | U7
// U0..U2 - RDECh, U3..U6 - AuxCh, U7 - BaseChannel.
//С целью минимизации числа неиспользуемых при вычислениях элементов матрицы Q,
//она преобразуется в матрицу Q следующего вида:
//       U0  U1  U2
//     | q00 q01 q02 | U3
//     | q10 q11 q12 | U4
// Q = | q20 q21 q22 | U5
//     | q30 q31 q32 | U6
//Из матрицы первоначальной матрицы Q вырезается  единичная  матрица и последняя
//ее строка, так как отсутствие данных элементов можно легко учесть при реализа-
//ции алгоритма Q-преобразования.
//В качестве  входного  воздействия может быть использованы комплексные корреля-
//ционная матрица R или вектор напряжений U, которые должны содержать компоненту
//ОСНОВНОГО канала адаптивного фильтра. При Q-преобразовании проверяется работо-
//способность фильтра и соответствие размерности входного воздействия размернос-
//ти пространственного режекторного фильтра. При их несоответствии или неработо-
//способности фильтра возвращается вектор или матрица нулевого размера.
//Размерность входного вектора должна быть равна числу входов фильтра. Матрица R
//должна быть квадратной и ее размерность, также, д.б. равна числу входов SRF. В
//качестве выходного значения объект класса возвращает вектор или квадратную мат-
//рицу с размерностями равными числу выходов Space Reject Filter.
//******************************************************************************
class TSingleStageAuxChSRF : public TAuxChSpaceRejectFilter {
//------------------------------------------------------------------------------
// Объявление защищенных членов-данных класса TSingleStageAuxChSRF
//------------------------------------------------------------------------------
protected:
 cmatrix Q;//Матрица Q-преобразования
 cmatrix trQ;//Матрица сопряженно-транспонированная к матрице Q
//------------------------------------------------------------------------------
//ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ и ДЕСТРУКТОРА КЛАССА TSingleStageAuxChSRF
//------------------------------------------------------------------------------
public:
 //Конструктор по умолчанию
 TSingleStageAuxChSRF() {Reset();};
 //Конструктор с аргументами
 TSingleStageAuxChSRF(const cmatrix& A) {Tuning(A);};
 //Объявление деструктора класса
 ~TSingleStageAuxChSRF() {Reset();};
//------------------------------------------------------------------------------
//Объявление общедоступных членов-функций класса TSingleStageAuxChSRF
//------------------------------------------------------------------------------
public:
 //-----------------------------------------------------------------------------
 //Передаточная функция (TRANSFER FUNCTION) TSingleStageAuxChSRF
 //-----------------------------------------------------------------------------
 bool TFunc(const cmatrix& InR, cmatrix& OutR) const;
 bool TFuncDM(const cmatrix& InR, cmatrix& OutR) const;
 bool TFunc(const cvector& InV, cvector& OutV) const;
 //-----------------------------------------------------------------------------
 //Настройка весовых коэффициентов режекторного пространственного фильтра
 //-----------------------------------------------------------------------------
 bool Tuning(const cmatrix& A);
 //-----------------------------------------------------------------------------
 //Получение весовых коэффициентов TSingleStageAuxChSRF
 //-----------------------------------------------------------------------------
 bool GetW(cmatrix& W, bool lExtend = ON) const;
 //-----------------------------------------------------------------------------
 //Консольный ввод-вывод свойств класса TSingleStageAuxChSRF
 //-----------------------------------------------------------------------------
 uint Type() const {return SingleStageUnit;};//Тип весового сумматора
 //Тип весового сумматора
 string& Type(string& s) const
 {return s = "SingleStage Space Reject Filter of the Auxiliary Channels";};
 //Сокращенное наименование класса
 string& Clip(string& s) const {return s = "SingleStageAuxChSRF";};
 //Формирование свойств весового сумматора в виде символьной строки
 string& Properties(string& s, string& head, uint indent = 0) const;
 //Перегрузка операции потокового вывода (<<) свойств класса
 friend ostream& operator <<(ostream& out, const TSingleStageAuxChSRF& SRF)
 {string s; return out << SRF.Properties(s,STR_NULL);};

//------------------------------------------------------------------------------
//Объявление защищенных членов-функций класса TSingleStageAuxChSRF
//------------------------------------------------------------------------------
protected:
 //Начальная установка параметров режекторного фильтра
 void Reset() {Input = 0L; Output = 0L; Q = cmatrix(); trQ = cmatrix();};
};//Завершение объявления класса TSingleStageAuxChSRF
//------------- Завершение объявления класса TSingleStageAuxChSRF --------------


//---------------------------- The end of file "Preprocessor.h" --------------------------
#endif //ЗАВЕРШЕНИЕ ОБЪЯВЛЕНИЯ ЗАГОЛОВОЧНОГО ФАЙЛА "PreProcessor.h"
