//----------------------------------------------------------------------------------------
//Regularity.h
//Объявление классов, связанных с исследованием влияния внутрисистемных возмущений на
//качество работы адаптивных информационных систем и алгоритмов регуляризации, призванных
//улучшить работу адаптивной системы в условиях присутствия внутрисистемных возмущений.
//Initial date: December,20,2006. Final date:
//Copyright (c) JohnSoft 2006. All rights reserved. C++ Builder 6
//----------------------------------------------------------------------------------------
#ifndef RegularityH
#define RegularityH

#include "const.h"
#include "matrix.h"
#include "RandGen.h"

//****************************************************************************************
//Предварительное объявление имен классов
//****************************************************************************************
//Абстрактный (базовый) класс построения оператора возмущения ковариационной матрицы
class TCovMatrixPerturbOperator;
class TDisturbCovMatrix_Random;//Возмущение матрицы по равномерному закону
class TDisturbCovMatrix_Gauss; //Возмущение матрицы по нормальному закону

//Абстрактный (базовый) класс построения обратного оператора ковариационной матрицы
class TCovMatrixInversion;
class TInvCovMatrix_Classical;   //Прямой метод обращения матрицы без ее регуляризации
class TInvCovMatrix_Laurentiev;  //Обращение с регуляризацией по схеме Лаврентьева
class TInvCovMatrix_Tychonoff;   //Обращение с регуляризацией по схеме Тихонова
class TInvCovMatrix_Skachkov;    //Обращение с регуляризацией по схеме Скачкова
//Обращение по с регуляризацией по модифицированному алгоритму Тихонова (n-кратное перемно-
//жение ковариационной матрицы, n > 0)
class TInvCovMatrix_ModTychonoff;


//****************************************************************************************
//                       ОБЪЯВЛЕНИЕ КЛАССА - TCovMatrixPerturbOperator
// АБСТРАКТНЫЙ (БАЗОВЫЙ) КЛАСС ПОСТРОЕНИЯ ОПЕРАТОРА ВОЗМУЩЕНИЯ КОВАРИАЦИОННОЙ МАТРИЦЫ
// Теория. Ковариационная (корреляционная) матрица наблюдаемого процесса, как правило,
// является эрмитовой матрицей. Знание этой матрицы дает возможность определить характе-
// ристики наблюдаемого процесса (объекта), решив уравнение Винера-Хопфа: Wopt = InvA*a,
// где InvA - обратная матрица к ковариационной матрице A. Наличие внутрисистемных ошибок
// приводит к возмущению матрицы A на величину dA. dA - является оператором возмущения
// ковариационной матрицы A. Оператор возмущения представляет собой комплексную квадратную
// матрицу, поддиагональные и наддиагональные элементы матрицы dA комплексно-сопряжены.
// Размерность матрицы dA равна размерности ковариационной матрицы A. Значения элементов
// dA определяются дисперсией внутрисистемных ошибок D, законом их распределения, нормой и
// размерностью ковариационной матрицы A. Формула связи между обобщенным значением диспер-
// сии D, которая не привязана к конкретной матрице A, и значением дисперсии D', которая
// зависит от вида матрицы A и должна быть учтена при формировании элементов оператора воз-
// мущения, имеет вид: D' = ||A||^2*D/N^2, где
// 1. ||A|| - евклидова норма матрицы A;
// 2. N - размерность матрицы A.
// Целевое предназначение классов, наследующих характеристики данного базового абстрактного
// класса, заключается в построении матричного оператора dA внутрисистемных возмущений
// для заданной ковариационной матрицы, исходя из дисперсии внутрисистемных ошибок и вида
// закона распределения, который является сигнатурой каждого класса-предка.
// Таким образом, входными данными для построения оператора возмущения ковариационной
// матрицы A, равно как и ее возмущения, являются:
// 1) Размерность матрицы A (матрица должна быть квадратной и комплексной, свойства эрми-
//    товости матрицы не проверяются);
// 2) Матрица A при необходимости ее возмущения: B = A + dA;
// 3) Значение обобщенной дисперсии D внутрисистемных ошибок (не привязана к матрице A);
// 4) Закон распределения внутриситемных ошибок - каждый класс-наследник реализует свой
//    закон распределения. Требования к закону распределения следующие:
//    a) Математическое ожидание СВ равно 0 (M = 0) [необязательное ограничение];
//    b) Симметрическая функция плотности вероятности [обязательное условие].
//****************************************************************************************
class TCovMatrixPerturbOperator {
//-----------------------------------------------------------------------------------
// ОБЪЯВЛЕНИЕ ЗАЩИЩЕННЫХ ЧЛЕНОВ-ДАННЫХ КЛАССА TCovMatrixPerturbOperator
//-----------------------------------------------------------------------------------
protected:
 TRandGen_64 RandGen; //64-x разрядный датчик случайных чисел

//-----------------------------------------------------------------------------------
// I. ОБЪЯВЛЕНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TCovMatrixPerturbOperator
//-----------------------------------------------------------------------------------
public:

//***********************************************************************************
// ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ И ДЕСТРУКТОРА КЛАССА TCovMatrixPerturbOperator
//***********************************************************************************
 //Объявление конструктора по умолчанию
 TCovMatrixPerturbOperator() {RandGen.Set(T64_1T);};
 //Объявление конструктора с аргументами
 TCovMatrixPerturbOperator(RNG64_ID Period, unsigned __int64 X0 = 0)
 {RandGen.Set(Period,X0);};

 //Объявление деструктора класса
 ~TCovMatrixPerturbOperator() {};

 //Получение свойств класса
 bool IsReady() const {return RandGen.IsReady();};
 //Инициализация начального значения последовательности случайной величиной
 unsigned __int64 Randomize() {return RandGen.Randomize();};
 //Получение свойств генератора в виде строкового объекта string
 string& RandGenInfo(string& s) const {return RandGen.Info(s);};
 //Получение количества обращений к генератору случайных чисел
 unsigned __int64 RandGenCalls() const {return RandGen.GetCount();};

 //Получение свойств класса в виде строкового объекта string
 virtual string& Info(string& s) const = 0;

 //Возмущение ковариационной матрицы A случайным процессом с нулевым математическим
 //ожиданием и относительной дисперсией Disp
 bool Disturb(cmatrix& A, double Disp);
 bool Disturb(cmatrix& B, const cmatrix& A, double Disp);
 //Сгенерировать оператор возмущения для матрицы A по случайному процессу с заданным зако-
 //ном распределения, мат. ожиданием M = 0, относительной дисперсией Disp.
 virtual bool GetDistOperator(cmatrix& dA, const cmatrix& A, double Disp) = 0;
 //Сгенерировать вектор возмущений комплексной СВ, согласованный с евклидовой нормой матрицы
 //NormA размерности N, по случайному закону с заданным распределением с нулевым MO и отно-
 //сительной дисперсией RelDisp.
 bool GetDistVector(cvector& dV, ulong N, double NormA, double RelDisp);
 //Сформировать оператор возмущения dA как симметрическую комплексную матрицу размерности N,
 //элементы которой распределены по случайному закону с нулевым МО и относительной дисперсией
 //RelDisp
 bool GetDistOpAsSymmetrMatrix(cmatrix& dA, ulong N, double NormA, double RelDisp);
 //Сформировать оператор возмущения dA как ковариационную матрицу по вектору V размерности N,
 //элементы которого распределены по случайному закону с нулевым МО и относительной дисперсией
 //RelDisp: dA = dV*Tr(dV).
 bool GetDistOpByVector(cmatrix& dA, ulong N, double NormA, double RelDisp);

 //***************************************************************************************
 // ДРУЖЕСТВЕННЫЕ ФУНКЦИИ КЛАССА TCovMatrixPerturbOperator
 // 1. ФУНКЦИИ ВВОДА - ВЫВОДА ПАРАМЕТРОВ
 //***************************************************************************************
 //Перегрузка оператора вывода (<<) для вывода параметров класса
 friend ostream& operator <<(ostream& out, const TCovMatrixPerturbOperator& Obj)
 {string s; return out << Obj.Info(s);};
 bool operator ()(cmatrix& A, double Disp) {return this->Disturb(A,Disp);};
 bool operator ()(cmatrix& B, const cmatrix& A, double Disp)
 {return this->Disturb(B,A,Disp);};

//-----------------------------------------------------------------------------------
// II. ОБЪЯВЛЕНИЕ ЗАЩИЩЕННЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TCovMatrixPerturbOperator
//-----------------------------------------------------------------------------------
protected:
 //Сгенерировать вектор реализаций с дисперсией Disp, нулевым МО по заданному закону
 //распределения случайной величины.
 virtual bool GetRandVector(cvector& V, ulong size, double Disp) = 0;

};//Завершение объявления класса TCovMatrixPerturbOperator

//****************************************************************************************
//Объявление производного класса TDisturbCovMatrix_Random от абстрактного (базового) класса
//TCovMatrixPerturbOperator
//Copyright (c) JohnSoft 2006. All rights reserved.
//Initial date: December,22,2006; Final date:
//Класс наследует все свойства класса TCovMatrixPerturbOperator и реализует случайный про-
//цесс с равномерным законом распределения, нулевым математическим ожиданием и заданной
//обобщенной дисперсией D. Обобщенное значение дисперсии D должно пересчитываться в значе-
//ние D', которое зависит от нормы и размерности, возмущаемой ковариационной матрицы A.
//Именно значение дисперсии D' = ||A||^2*D/N^2 используется для выработки значений СВ, каж-
//дого элемента матричного оператора возмущения dA.
//Для равномерно распределенной СВ с M = 0 формула связи дисперсии и интервала
//[-a..a] следующая: D' = (b-a)^2/12; D' = (a-(-a))^2/12; D' = a^2/3; a = sqrt(3D').
//****************************************************************************************
class TDisturbCovMatrix_Random : public TCovMatrixPerturbOperator {

//----------------------------------------------------------------------------------------
// I. ОБЪЯВЛЕНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TDisturbCovMatrix_Random
//----------------------------------------------------------------------------------------
public:
//****************************************************************************************
// ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ И ДЕСТРУКТОРА КЛАССА TDisturbCovMatrix_Random
//****************************************************************************************
 //Конструктор по умолчанию
 TDisturbCovMatrix_Random() : TCovMatrixPerturbOperator() {};

 //Конструктор с аргументами
 TDisturbCovMatrix_Random(RNG64_ID Period, unsigned __int64 X0 = 0) :
 TCovMatrixPerturbOperator(Period,X0) {};

 //Объявление деструктора класса
 virtual ~TDisturbCovMatrix_Random() {};
//----------------------------------------------------------------------------------------
//Объявление общедоступных членов-функций класса TDisturbCovMatrix_Random
//----------------------------------------------------------------------------------------
 //Получение свойств класса в виде строкового объекта string
 virtual string& Info(string& s) const
 {return s.assign("Covariation Matrix Perturbing Operator: Random Law;");};

 //Сгенерировать оператор возмущения для матрицы A, элементы которого распределены равнове-
 //роятно и имеют нулевое мат. ожидание и обобщенное значение дисперсии Disp
 virtual bool GetDistOperator(cmatrix& dA, const cmatrix& A, double Disp);

//----------------------------------------------------------------------------------------
//Объявление защищенных членов-функций класса TDisturbCovMatrix_Random
//----------------------------------------------------------------------------------------
protected:
 //Сгенерировать вектор реализаций комплексной СВ с дисперсией Disp, нулевым МО, распреде-
 //ленной по равномерному закону
 virtual bool GetRandVector(cvector& V, ulong size, double Disp);

};//Завершение объявления класса TDisturbCovMatrix_Random

//****************************************************************************************
//Объявление производного класса TDisturbCovMatrix_Gauss от абстрактного (базового) класса
//TCovMatrixPerturbOperator
//Copyright (c) JohnSoft 2006. All rights reserved.
//Initial date: December,22,2006; Final date:
//Класс наследует все свойства класса TCovMatrixPerturbOperator и реализует случайный про-
//цесс с нормальным законом распределения, нулевым математическим ожиданием и заданной
//обобщенной дисперсией D. Обобщенное значение дисперсии D должно пересчитываться в значе-
//ние D', которое зависит от нормы и размерности, возмущаемой ковариационной матрицы A.
//Именно значение дисперсии D' = ||A||^2*D/N^2 используется для выработки значений СВ, каж-
//дого элемента матричного оператора возмущения dA.
//Для получения нормально распределенной СВ с M = 0 и дисперсией D' используется датчик,
//вырабатывающий нормально распределенную СВ X с Mx = 0 и Dx = 1. Далее используется
//формула перехода к нормально распределенной СВ Y с произвольным M и D':
//Y = M + sqrt(D')*X. В случае M = 0 получаем Y = sqrt(D')*X.
//****************************************************************************************
class TDisturbCovMatrix_Gauss : public TCovMatrixPerturbOperator {

//----------------------------------------------------------------------------------------
// I. ОБЪЯВЛЕНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TDisturbCovMatrix_Gauss
//----------------------------------------------------------------------------------------
public:
//****************************************************************************************
// ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ И ДЕСТРУКТОРА КЛАССА TDisturbCovMatrix_Gauss
//****************************************************************************************
 //Конструктор по умолчанию
 TDisturbCovMatrix_Gauss() : TCovMatrixPerturbOperator() {};

 //Конструктор с аргументами
 TDisturbCovMatrix_Gauss(RNG64_ID Period, unsigned __int64 X0 = 0) :
 TCovMatrixPerturbOperator(Period,X0) {};

 //Объявление деструктора класса
 virtual ~TDisturbCovMatrix_Gauss() {};
//----------------------------------------------------------------------------------------
//Объявление общедоступных членов-функций класса TDisturbCovMatrix_Gauss
//----------------------------------------------------------------------------------------
 //Получение свойств класса в виде строкового объекта string
 virtual string& Info(string& s) const
 {return s.assign("Covariation Matrix Perturbing Operator: Gauss Law;");};

 //Сгенерировать оператор возмущения для матрицы A, элементы которого распределены нормально
 //и имеют нулевое мат. ожидание и обобщенное значение дисперсии Disp
 virtual bool GetDistOperator(cmatrix& dA, const cmatrix& A, double Disp);


//----------------------------------------------------------------------------------------
//Объявление защищенных членов-функций класса TDisturbCovMatrix_Gauss
//----------------------------------------------------------------------------------------
protected:
 //Сгенерировать вектор реализаций комплексной СВ с дисперсией Disp, нулевым МО с нормаль-
 //ным (гауссовым) законом распределения
 virtual bool GetRandVector(cvector& V, ulong size, double Disp);

};//Завершение объявления класса TDisturbCovMatrix_Gauss


//****************************************************************************************
//                       ОБЪЯВЛЕНИЕ КЛАССА - TCovMatrixInversion
//     АБСТРАКТНЫЙ (БАЗОВЫЙ) КЛАСС ОБРАЩЕНИЯ ВОЗМУЩЕННОЙ КОВАРИАЦИОННОЙ МАТРИЦЫ
// Базовый абстрактный класс построения обратной матрицы к ковариационной матрице, которая
// может быть возмущенной. Ковариационная матрица является эрмитовой - комплексный аналог
// вещественной симметрической матрицы. Производные классы реализуют различные методы (схемы)
// регуляризации исходной ковариационной матрицы перед ее обращением, что дает возможность
// в зависимости от выбранного параметра регуляризации и регуляризирующего алгоритма компен-
// сировать внутрисистемные ошибки информационной системы, которые вызывают возмущение
// исходной ковариационной матрицы. Таким образом, в условиях внутрисистемных возмущений
// регуляризация возмущенной матрицы входного процесса дает возможность повысить устойчи-
// вость и точность решения (нахождения обратной матрицы к ковариационной матрице).
// При обращении матрицы не осуществляется ее проверка на эрмитовость с целью убыстрения
// работы, проверяется только ее квадратность. Алгоритм обращения матрицы реализуется по
// схеме Краута применительно к комплексной матрицы (без учета ее эрмитовости).
//****************************************************************************************
class TCovMatrixInversion {
//-----------------------------------------------------------------------------------
// I. ОБЪЯВЛЕНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TCovMatrixInversion
//-----------------------------------------------------------------------------------
public:

//***********************************************************************************
// ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ И ДЕСТРУКТОРА КЛАССА TCovMatrixInversion
//***********************************************************************************
 //Объявление конструктора по умолчанию
 TCovMatrixInversion() {};
 //Объявление деструктора класса
 ~TCovMatrixInversion() {};

 //Получение свойств класса в виде строкового объекта string
 string& Info(string& s) const;
 //Наименование метода регуляризации
 virtual string& Method(string& s, bool lBrief = true) const = 0;
 //Алгоритм обращения матрицы с ее регуляризацией
 virtual string& Algorithm(string& s) const = 0;

 //Обращение возмущенной ковариационной матрицы A
 bool virtual Inverse(cmatrix& InvA, const cmatrix& A, double a = 0) const = 0;

 //Консольное редактирование свойств объекта
 virtual void Edit();

 //***************************************************************************************
 // ДРУЖЕСТВЕННЫЕ ФУНКЦИИ КЛАССА TCovMatrixInversion
 // 1. ФУНКЦИИ ВВОДА - ВЫВОДА ПАРАМЕТРОВ
 //***************************************************************************************
 //Перегрузка оператора вывода (<<) для вывода параметров класса
 friend ostream& operator <<(ostream& out, const TCovMatrixInversion& Obj)
 {string s; return out << Obj.Info(s);};
 bool operator ()(cmatrix& InvA, const cmatrix& A, double a = 0)
 {return this->Inverse(InvA,A,a);};

};//Завершение объявления класса TCovMatrixInversion

//****************************************************************************************
//Объявление производного класса TInvCovMatrix_Classical от абстрактного (базового) класса
//TCovMatrixInversion
//Copyright (c) JohnSoft 2006. All rights reserved.
//Initial date: December,23,2006; Final date:
//Класс наследует свойства класса TCovMatrixInversion и реализует прямой метод обращения
//ковариационной матрицы без ее регуляризации по схеме Краута (для комплексных матриц).
//Таким образом, такой класс реализует классический подход к вычислению обратной матрицы,
//что не позволяет компенсировать наличие внутрисистемных ошибок в исходной ковариационной
//матрице, подлежащей обращению.
//****************************************************************************************
class TInvCovMatrix_Classical : public TCovMatrixInversion {

//----------------------------------------------------------------------------------------
// I. ОБЪЯВЛЕНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TInvCovMatrix_Classical
//----------------------------------------------------------------------------------------
public:
//****************************************************************************************
// ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ И ДЕСТРУКТОРА КЛАССА TInvCovMatrix_Classical
//****************************************************************************************
 //Конструктор по умолчанию
 TInvCovMatrix_Classical() : TCovMatrixInversion() {};

 //Объявление деструктора класса
 virtual ~TInvCovMatrix_Classical() {};
//----------------------------------------------------------------------------------------
//Объявление общедоступных членов-функций класса TInvCovMatrix_Classical
//----------------------------------------------------------------------------------------
 //Наименование метода регуляризации
 string& Method(string& s, bool lBrief = true) const;
 //Алгоритм обращения матрицы с ее регуляризацией
 string& Algorithm(string& s) const;

 //Обращение возмущенной ковариационной матрицы A прямым методом без регуляризации
 bool Inverse(cmatrix& InvA, const cmatrix& A, double a = 0) const;

};//Завершение объявления класса TInvCovMatrix_Classical

//****************************************************************************************
//Объявление производного класса TInvCovMatrix_Laurentiev от абстрактного (базового) класса
//TCovMatrixInversion
//Copyright (c) JohnSoft 2006. All rights reserved.
//Initial date: December,23,2006; Final date:
//Класс наследует свойства класса TCovMatrixInversion и реализует метод обращения ковариа-
//ционной матрицы c ее регуляризацией по методу Лаврентьева:
// InvA = Inv(A + aI), где
// 1) a - параметр регуляризации (a >= 0);
// 2) A - возмущенная ковариационная матрица;
// 3) I - единичная матрица размерности равной A.
//При согласованном выборе параметра регуляризации с диспресией внутрисистемных ошибок,
//присутствующих в матрице A и ее структуры метод Лаврентьева позволяет компенсировать
//влияние возмущений на вычисление обратной матрицы InvA. Обращение регуляризированной по
//методу Лаврентьева матрицы (A+aI) выполняется по алгоритму Краута.
//****************************************************************************************
class TInvCovMatrix_Laurentiev : public TCovMatrixInversion {

//----------------------------------------------------------------------------------------
// I. ОБЪЯВЛЕНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TInvCovMatrix_Laurentiev
//----------------------------------------------------------------------------------------
public:
//****************************************************************************************
// ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ И ДЕСТРУКТОРА КЛАССА TInvCovMatrix_Laurentiev
//****************************************************************************************
 //Конструктор по умолчанию
 TInvCovMatrix_Laurentiev() : TCovMatrixInversion() {};

 //Объявление деструктора класса
 virtual ~TInvCovMatrix_Laurentiev() {};
//----------------------------------------------------------------------------------------
//Объявление общедоступных членов-функций класса TInvCovMatrix_Laurentiev
//----------------------------------------------------------------------------------------
 //Наименование метода регуляризации
 string& Method(string& s, bool lBrief = true) const;
 //Алгоритм обращения матрицы с ее регуляризацией
 string& Algorithm(string& s) const;

 //Обращение возмущенной регуляризированной по методу Лаврентьева ковариационной матрицы A
 bool Inverse(cmatrix& InvA, const cmatrix& A, double a = 0) const;

};//Завершение объявления класса TInvCovMatrix_Laurentiev

//****************************************************************************************
//Объявление производного класса TInvCovMatrix_Tychonoff от абстрактного (базового) класса
//TCovMatrixInversion
//Copyright (c) JohnSoft 2006. All rights reserved.
//Initial date: December,23,2006; Final date:
//Класс наследует свойства класса TCovMatrixInversion и реализует метод обращения ковариа-
//ционной матрицы c ее регуляризацией по методу Тихонова:
// InvA = Inv[TrA*A + aI]*TrA, где
// 1) a   - параметр регуляризации (a >= 0);
// 2) A   - возмущенная ковариационная матрица;
// 3) TrA - транспонированная (комплексно-сопряженная) матрица к матрице A;
// 4) I   - единичная матрица размерности равной A.
//При согласованном выборе параметра регуляризации с диспресией внутрисистемных ошибок,
//присутствующих в матрице A и ее структуры метод Тихонова позволяет компенсировать влияние
//возмущений на вычисление обратной матрицы InvA. Обращение регуляризированной по методу
//Тихонова матрицы (TrA*A + aI) выполняется по алгоритму Краута.
//****************************************************************************************
class TInvCovMatrix_Tychonoff : public TCovMatrixInversion {

//----------------------------------------------------------------------------------------
// I. ОБЪЯВЛЕНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TInvCovMatrix_Tychonoff
//----------------------------------------------------------------------------------------
public:
//****************************************************************************************
// ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ И ДЕСТРУКТОРА КЛАССА TInvCovMatrix_Tychonoff
//****************************************************************************************
 //Конструктор по умолчанию
 TInvCovMatrix_Tychonoff() : TCovMatrixInversion() {};

 //Объявление деструктора класса
 virtual ~TInvCovMatrix_Tychonoff() {};
//----------------------------------------------------------------------------------------
//Объявление общедоступных членов-функций класса TInvCovMatrix_Tychonoff
//----------------------------------------------------------------------------------------
 //Наименование метода регуляризации
 string& Method(string& s, bool lBrief = true) const;
 //Алгоритм обращения матрицы с ее регуляризацией
 string& Algorithm(string& s) const;

 //Обращение возмущенной регуляризированной по методу Тихонова ковариационной матрицы A
 bool Inverse(cmatrix& InvA, const cmatrix& A, double a = 0) const;

};//Завершение объявления класса TInvCovMatrix_Tychonoff

//****************************************************************************************
//Объявление производного класса TInvCovMatrix_ModTychonoff от абстрактного (базового) класса
//TCovMatrixInversion
//Copyright (c) JohnSoft 2007. All rights reserved.
//Initial date: February,14,2007; Final date:
//Класс наследует свойства класса TCovMatrixInversion и реализует метод обращения ковариа-
//ционной матрицы c ее регуляризацией по модифицированному методу Тихонова:
// InvA = Inv[A^(n+1) + a*I]*A^n, где
// 1) a - параметр регуляризации (a >= 0);
// 2) A - возмущенная ковариационная матрица;
// 3) n - показатель степени (n > 0, при n = 1 - метод Тихонова);
// 4) A^n - n-кратное перемножение матрицы A саму на себя;
// 5) I - единичная матрица размерности равной A.
//Модифицированный метод Тихонова использует n-кратное перемножение ковариационной матрицы
//A саму на себя, что позволяет реализовать при достаточно большом n КВАЗИУСТОЙЧИВЫЙ к ва-
//риациям регуляризирующей меры <a> алгоритм. При согласованном выборе параметра регуляри-
//зации с дисперсией внутрисистемных ошибок, присутствующих в матрице A и ее структуры мо-
//дифицированный метод Тихонова позволяет компенсировать влияние возмущений на вычисление
//обратной матрицы InvA. Обращение регуляризированной по данному методу матрицы выполняется
//по алгоритму Краута.
//****************************************************************************************
class TInvCovMatrix_ModTychonoff : public TCovMatrixInversion {
//-----------------------------------------------------------------------------------
// ОБЪЯВЛЕНИЕ ЗАЩИЩЕННЫХ ЧЛЕНОВ-ДАННЫХ КЛАССА TInvCovMatrix_ModTychonoff
//-----------------------------------------------------------------------------------
protected:
 ulong n; //Показатель степени, в которую возводится матрица A
//----------------------------------------------------------------------------------------
// I. ОБЪЯВЛЕНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TInvCovMatrix_ModTychonoff
//----------------------------------------------------------------------------------------
public:
//****************************************************************************************
// ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ И ДЕСТРУКТОРА КЛАССА TInvCovMatrix_Tychonoff
//****************************************************************************************
 //Конструктор по умолчанию
 TInvCovMatrix_ModTychonoff() : TCovMatrixInversion() {n = 2;};
 //Конструктор с параметрами
 TInvCovMatrix_ModTychonoff(ulong Exp) : TCovMatrixInversion() {SetExponent(Exp);};

 //Объявление деструктора класса
 virtual ~TInvCovMatrix_ModTychonoff() {n = 0;};
//----------------------------------------------------------------------------------------
//Объявление общедоступных членов-функций класса TInvCovMatrix_ModTychonoff
//----------------------------------------------------------------------------------------
 //Установка показателя степени n
 ulong SetExponent(ulong Exp) {return this->n = (Exp == 0) ? 2 : Exp;};
 //Наименование метода регуляризации
 string& Method(string& s, bool lBrief = true) const;
 //Алгоритм обращения матрицы с ее регуляризацией
 string& Algorithm(string& s) const;
 //Консольное редактирование свойств объекта
 virtual void Edit();
 //Обращение возмущенной регуляризированной по модифицированному методу Тихонова
 //ковариационной матрицы A
 bool Inverse(cmatrix& InvA, const cmatrix& A, double a = 0) const;

 //---------------------------------------------------------------------------------------
//Объявление защищенных членов-функций класса TInvCovMatrix_ModTychonoff
//---------------------------------------------------------------------------------------
protected:
 //Консольное редактирование показателя степени n
 void Edit_Exponent();

};//Завершение объявления класса TInvCovMatrix_ModTychonoff


//****************************************************************************************
//Объявление производного класса TInvCovMatrix_Skachkov от абстрактного (базового) класса
//TCovMatrixInversion
//Copyright (c) JohnSoft 2006. All rights reserved.
//Initial date: December,23,2006; Final date:
//Класс наследует свойства класса TCovMatrixInversion и реализует метод обращения ковариа-
//ционной матрицы c ее регуляризацией по методу Скачкова:
// InvA = Inv[A + a*T], где
// 1) a  - параметр регуляризации (a >= 0);
// 2) A  - возмущенная ковариационная матрица;
// 3) T  - матрица, составленная из суммы произведений собственных векторов Vk матрицы A на
//         комплексно-сопряженные транспонированные с ними собственные векторы TrVk, кото-
//         рые соответствуют вырожденным собственным числам матрицы A - EigenVal = 1.0:
//         T = SUM[Vk*TrVk], для k, у которых EigenVals = 1.0.
//Таким образом, для составления матрицы T необходимо решить полную проблему собственных
//чисел и векторов матрицы A. Для этого применяется метод Якоби с понижением нормы для
//комплексных матриц общего вида.
//Метод регуляризации Скачков делает инвариантным выбор параметра регуляризации a к уровню
//внутрисистемных ошибок по сравнению с метода Лаврентьева (самый чувствительный метод),
//так и метод Тихонова. Обращение регуляризированной по методу Скачкова матрицы (*A + aT)
//выполняется по алгоритму Краута.
//P.S. Доказывается что n-кратное умножение матриц TrA*A при n -> бесконечности приводит
//к матрице T, что также может обеспечить инвариантность выбора параметра регуляризации
//в методе Тихонова, хот я это будет сопряжено с гораздо большим объемом операций, так как
//выполнение операций умножения матриц наиболее затратно с вычислительной точки зрения:
// lim{Inv[A^(n+1) + aI]*A^n, n -> INF => Inv[A + a*T]}.
//****************************************************************************************
class TInvCovMatrix_Skachkov : public TCovMatrixInversion {

//----------------------------------------------------------------------------------------
// I. ОБЪЯВЛЕНИЕ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TInvCovMatrix_Skachkov
//----------------------------------------------------------------------------------------
public:
//****************************************************************************************
// ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ И ДЕСТРУКТОРА КЛАССА TInvCovMatrix_Skachkov
//****************************************************************************************
 //Конструктор по умолчанию
 TInvCovMatrix_Skachkov() : TCovMatrixInversion() {};

 //Объявление деструктора класса
 virtual ~TInvCovMatrix_Skachkov() {};
//----------------------------------------------------------------------------------------
//Объявление общедоступных членов-функций класса TInvCovMatrix_Skachkov
//----------------------------------------------------------------------------------------
 //Наименование метода регуляризации
 string& Method(string& s, bool lBrief = true) const;
 //Алгоритм обращения матрицы с ее регуляризацией
 string& Algorithm(string& s) const;

 //Обращение возмущенной регуляризированной по методу Скачкова ковариационной матрицы A
 bool Inverse(cmatrix& InvA, const cmatrix& A, double a = 0) const;

};//Завершение объявления класса TInvCovMatrix_Skachkov


//------------------------- The end of file "Regularity.h" -------------------------------
#endif //ЗАВЕРШЕНИЕ ОБЪЯВЛЕНИЯ ЗАГОЛОВОЧНОГО ФАЙЛА "Regularity.h"
