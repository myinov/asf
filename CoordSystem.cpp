//-----------------------------------------------------------------------------------
//CoordSystem.cpp
//Copyright (c) JohnSoft 2003. All rights reserved. C++ Borland 6.
//Initial date: April,12,2003. Final date:
//Реализация классов представления различных систем координат:
//1. ПОЛЯРНЫЕ КООРДИНАТЫ

#include "CoordSystem.h"

//****************************************************************************************
//СТАТУС: ФУНКЦИЯ ОБЩЕГО НАЗНАЧЕНИЯ
//НАИМЕНОВАНИЕ ФУНКЦИИ: double RoundToInt(const double value, double eps = 1e-10)
//НАЗНАЧЕНИЕ: Функция пытается округлить вещественное число value до ближайшего целого
//числа с точностью eps. Если модуль разности между числами value и ближайшим целым
//числом меньше eps, то функция возвращает целое число ближайшее к value, в противном
//случае возвращается число value. Функция не изменяет значения value.
//----------------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. const double& value  - вещественное число, округляемое до целого;
//2. double& eps - допустимая точность округления
//----------------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
// double res - результат попытки округления вещественного числа до целого с точностью eps
//****************************************************************************************
double RoundToInt(const double value, double eps)
{double res = ceil(value);//Наименьшее целое не меньше, чем value
 if (fabs(value - res) < eps) return res;
 else
 {res = floor(value);//Наибольшее целое не больше, чем value
  if (fabs(value - res) < eps) return res;
 }
 return value;
}


//***********************************************************************************
//                 РЕАЛИЗАЦИЯ КЛАССА TPolarCoord
//***********************************************************************************
//===================================================================================
// I. РЕАЛИЗАЦИЯ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TPolarCoord
//    PUBLIC MEMBER-FUNCTION OF TPolarCoord CLASS
//===================================================================================
//***********************************************************************************
//СТАТУС: I.1; TPolarCoord public member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: double SetAngleOfRad(double Angle)
//НАЗНАЧЕНИЕ: Установка нового значения ПОЛЯРНОГО УГЛА в радианах. Значение угла Angle,
//передаваемое функции в РАДИАНАХ, будет приведено к интервалу [0..2PI). Функция воз-
//вращает новое значение полярного угла phi.
//-----------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: double Angle - новое значение угла в радианах
//-----------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: double Angle - установленное значение угла в радианах
//***********************************************************************************
double TPolarCoord::SetAngleOfRad(double Angle)
{if (Angle >= 0) //Положительное направление отсчета угла (против часовой стрелки)
  while (Angle > TwoPI) Angle -= TwoPI;
 else //Отрицательное направление отсчета угла (по часовой стрелке)
 {while (Angle < -TwoPI) Angle += TwoPI;
  Angle += TwoPI;
 }
 phi = Angle;
 return AngleOfRad();
}
//***********************************************************************************
//СТАТУС: I.2; TPolarCoord public member-function - OVERLOAD ASSIGNMENT OPERATOR
//НАИМЕНОВАНИЕ ФУНКЦИИ: TPolarCoord* operator =(const TXYCoord& P)
//НАЗНАЧЕНИЕ: Перегрузка операции присваивания (=) для объектов класса TPolarCoord.
//При присваивании объекта TXYCoord P объекту TPolarCoord функция преобразует декартовы
//прямоугольные координаты точки на плоскости в ее полярные координаты.
//Функция возвращает указатель на объект класса TPolarCoord, которому был присвоен
//объект P класса TXYCoord, с целью реализации возможности каскадного присваивания.
//-----------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//const TXYCoord& P - константная ссылка на объект класса TXYCoord
//-----------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ:
//TPolarCoord* this - указатель на объект класса TPolarCoord
//***********************************************************************************
TPolarCoord* TPolarCoord::operator =(const TXYCoord& P)
{//Преобразование декартовых прямоугольных координат точки P в полярные - r & phi
 //с присваиванием этих значений объекту класса TPolarCoord
 Set(P.GetRadius(),P.GetPhi(RAD),RAD);
 return this;
}


//***********************************************************************************
//                 РЕАЛИЗАЦИЯ КЛАССА TXYCoord
//***********************************************************************************
//===================================================================================
// I. РЕАЛИЗАЦИЯ ОБЩЕДОСТУПНЫХ ЧЛЕНОВ-ФУНКЦИЙ КЛАССА TXYCoord
//    PUBLIC MEMBER-FUNCTION OF TXYCoord CLASS
//===================================================================================
//***********************************************************************************
//СТАТУС: I.1; TXYCoord public member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: XYPos Position(double eps = 1e-10) const
//НАЗНАЧЕНИЕ: Определение местоположения точки на координатной плоскости. Функция
//возвращает одно из нижеперечисленных значений перечисляемого типа XYPos:
// xyOrigin - начало координат
// xyQuadOne, xyQuadTwo, xyQuadThree, xyQuadFour - I - IV квадрант
// xyPosOX, xyNegOX, xyPosOY, xyNegOY - положительная или отрицательная полуоси OX, OY
//-----------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ: double eps - допустимая точность
//-----------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: XYPos PointPos - местоположение точки на плоскости
//***********************************************************************************
XYPos TXYCoord::Position(double eps) const
{XYPos PointPos;
 //Точка совпадает с началом координат
 if (IsOrigin(eps)) return PointPos = xyOrigin;
 //Точка находится на оси OX
 if (IsOX(eps)) return PointPos = (GetX() > 0) ? xyPosOX : xyNegOX;
 //Точка находится на оси OY
 if (IsOY(eps)) return PointPos = (GetY() > 0) ? xyPosOY : xyNegOY;
 //Определение квадранта I - IV, в котором находится точка
 if (GetX() > 0) PointPos = (GetY() > 0) ? xyQuadOne : xyQuadFour;
 else PointPos = (GetY() > 0) ? xyQuadTwo : xyQuadThree;
 return PointPos;
}
//***********************************************************************************
//СТАТУС: I.2; TXYCoord public member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: double GetPhi(bool AngleMeasure, double eps = 1e-10) const
//НАЗНАЧЕНИЕ: Расчет углового положения точки P(x,y) относительно начала координат.
//Функция возвращает рассчитанное угловое положение Phi. Угол Phi отсчитывается от
//положительной полуоси OX против часовой стрелки. Значения угла лежат в пределах
//[0..2*PI) радиан либо [0..360) градусов. В зависимости от значения AngleMeasure
//можно расчитывать угол Phi в градусной или радианной мерах.
//Величина eps устанавливает допустимую погрешность, в пределах которой можно считать,
//что точка находится на координатных осях либо совпадает с началом координат.
//N.B. При совпадении точки P(x,y) с началом координат функция возвращает Phi = 0.
//-----------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1. bool AngleMeasure - радианная или градусная мера вычисления угла
//2. double eps - допустимая точность
//-----------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: double Phi - угловое положение точки относительно O(0,0)
//***********************************************************************************
double TXYCoord::GetPhi(bool AngleMeasure, double eps) const
{//Определение местоположения точки на плоскости
 XYPos PointPos = Position(eps);
 double Phi = 0;
 //Точка совпадает с началом координат
 if ((PointPos == xyOrigin) || (PointPos == xyPosOX)) return Phi;
 else if (PointPos == xyNegOX) Phi = (AngleMeasure == RAD) ? OnePI : 180;
 else if (PointPos == xyPosOY) Phi = (AngleMeasure == RAD) ? HalfPI : 90;
 else if (PointPos == xyNegOY) Phi = (AngleMeasure == RAD) ? OnePI+HalfPI : 270;
 else
 {Phi = atan(fabs(GetY()/GetX()));
  if (AngleMeasure == DEG) Phi = Phi*RadDeg;
  if (PointPos == xyQuadTwo) Phi = (AngleMeasure == RAD) ? OnePI-Phi : 180-Phi;
  else if (PointPos == xyQuadThree) Phi = (AngleMeasure == RAD) ? OnePI+Phi : 180+Phi;
  else if (PointPos == xyQuadFour) Phi = (AngleMeasure == RAD) ? TwoPI-Phi : 360-Phi;
 }
 return Phi;
}
//***********************************************************************************
//СТАТУС: I.3; TXYCoord public member-function - OVERLOAD ASSIGNMENT OPERATOR
//НАИМЕНОВАНИЕ ФУНКЦИИ: TXYCoord* operator =(const TPolarCoord& P)
//НАЗНАЧЕНИЕ: Перегрузка операции присваивания (=) для объектов класса TXYCoord.
//При присваивании объекта TPolarCoord P объекту TXYCoord функция преобразует полярные
//координаты в декартовы прямоугольные координаты точки на плоскости.
//Функция возвращает указатель на объект класса TXYCoord, которому был присвоен
//объект P класса TPolarCoord, с целью реализации возможности каскадного присваивания.
//-----------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//const TPolarCoord& P - константная ссылка на объект класса TPolarCoord
//-----------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: TXYCoord* this - указатель на объект класса TXYCoord
//***********************************************************************************
TXYCoord* TXYCoord::operator =(const TPolarCoord& P)
{//Преобразование полярных координат точки P в декартовых прямоугольных координаты -
 //x & y с присваиванием этих значений объекту класса TXYCoord
 Set(P.GetX(),P.GetY());
 return this;
}
//***********************************************************************************
//СТАТУС: I.4; TXYCoord public member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ: TXYCoord* Rotation(double Phi, bool AngleMeasure)
//НАЗНАЧЕНИЕ: Поворот (вращение) точки относительно начала координат O(0,0) на угол
//Phi. Угол Phi может быть задан в градусах или радианах в зависимости от значения
//аргумента AngleMeasure. Функция изменяет члены-данные объекта класса TXYCoord и
//возвращает указатель на объект класса TXYCoord после выполнения операции поворота.
//При вращении координаты точки P(x,y) изменяются на P'(x',y') согласно выражениям:
//  x' = x*cos(Phi) - y*sin(Phi);  y' = x*sin(Phi) + y*cos(Phi).
//Угол Phi отсчитывается в направлении против часовой стрелки от положительной полуоси
//OX. При вычислениях угол Phi выражается в радианах.
//-----------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1) double Phi - значение угла поворота;
//2) bool AngleMeasure - радианная или градусная мера угла.
//-----------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: TXYCoord* this - указатель на объект класса TXYCoord
//***********************************************************************************
TXYCoord* TXYCoord::Rotation(double Phi, bool AngleMeasure)
{if (AngleMeasure == DEG) Phi *= DegRad;
 double cos_phi = cos(Phi);
 double sin_phi = sin(Phi);
 //Выполнение преобразования с установкой новых координат точки
 double new_x = x*cos_phi-y*sin_phi;
 double new_y = x*sin_phi+y*cos_phi;
 Set(new_x,new_y);
 return this;
}
//***********************************************************************************
//СТАТУС: I.5; TXYCoord public member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ:
// bool Rotation(TXYCoord& NP, double Phi, bool AngleMeasure) const
//НАЗНАЧЕНИЕ: Поворот (вращение) точки относительно начала координат O(0,0) на угол
//Phi. Угол Phi может быть задан в градусах или радианах в зависимости от значения
//аргумента AngleMeasure. Функция не изменяет члены-данные исходного объекта класса,
//присваивая новые координаты объекту NP, передаваемый в функцию по ссылке. Перед враще-
//нием сравниваются адреса исходного объекта (this) и объекта NP. При совпадении адре-
//сов функция возвращает false и поворот не выполняется, так как это приведет к изме-
//нению значений членов-данных исходного объекта.
//При вращении координаты точки P(x,y) изменяются на P'(x',y') согласно выражениям:
//  x' = x*cos(Phi) - y*sin(Phi);  y' = x*sin(Phi) + y*cos(Phi).
//Угол Phi отсчитывается в направлении против часовой стрелки от положительной полуоси
//OX. При вычислениях угол Phi выражается в радианах.
//-----------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1) TXYCoord& NP - ссылка на объект, которому присваиваются новые координаты точки
//   после ее поворота на угол Phi относительно начала координат;
//2) double Phi - значение угла поворота;
//3) bool AngleMeasure - радианная или градусная мера угла.
//-----------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: bool lSuccess - результат выполнения поворота
//***********************************************************************************
bool TXYCoord::Rotation(TXYCoord& NP, double Phi, bool AngleMeasure) const
{if (this == &NP) return false;
 if (AngleMeasure == DEG) Phi *= DegRad;
 double cos_phi = cos(Phi);
 double sin_phi = sin(Phi);
 //Выполнение преобразования с присваиванием новых координат точке NP
 NP.SetX(x*cos_phi-y*sin_phi);
 NP.SetY(x*sin_phi+y*cos_phi);
 return true;
}
//***********************************************************************************
//СТАТУС: I.6; TXYCoord public member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ:
// TXYCoord* Rotation(double Phi, bool AngleMeasure, const TXYCoord& T)
//НАЗНАЧЕНИЕ: Поворот (вращение) точки относительно заданной точки T(x0,y0), переда-
//ваемой по ссылке на угол Phi. Угол Phi может быть задан в градусах или радианах в
//зависимости от значения аргумента AngleMeasure. Функция изменяет члены-данные объекта
//класса TXYCoord и возвращает указатель на исходный объект после выполнения поворота.
//При вращении координаты точки P(x,y) относительно точки T(x0,y0) изменяются на
//P'(x',y') согласно выражениям:
//  x' = x0 + (x-x0)*cos(Phi) - (y-y0)*sin(Phi);
//  y' = y0 + (x-x0)*sin(Phi) + (y-y0)*cos(Phi).
//Угол Phi отсчитывается в направлении против часовой стрелки от положительной полуоси
//OX. При вычислениях угол Phi выражается в радианах.
//-----------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1) double Phi - значение угла поворота;
//2) bool AngleMeasure - радианная или градусная мера угла;
//3) const TXYCoord& T - констпантная ссылка на точку, относительно которой
//   выполняется поворот на угол Phi.
//-----------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: TXYCoord* this - указатель на исходный объект класса TXYCoord
//***********************************************************************************
TXYCoord* TXYCoord::Rotation(double Phi, bool AngleMeasure, const TXYCoord& T)
{if (AngleMeasure == DEG) Phi *= DegRad;
 double cos_phi = cos(Phi);
 double sin_phi = sin(Phi);
 double dx = x-T.GetX();
 double dy = y-T.GetY();
 //Выполнение вращения относительно точки T с установкой новых координат точки
 double new_x = T.GetX()+dx*cos_phi-dy*sin_phi;
 double new_y = T.GetY()+dx*sin_phi+dy*cos_phi;
 Set(new_x,new_y);
 return this;
}
//***********************************************************************************
//СТАТУС: I.7; TXYCoord public member-function
//НАИМЕНОВАНИЕ ФУНКЦИИ:
//bool Rotation(TXYCoord& NP, double Phi, bool AngleMeasure, const TXYCoord& T) const
//НАЗНАЧЕНИЕ: Поворот точки относительно точки T(x0,y0), передаваемой по ссылке, на угол
//Phi. Угол Phi может быть задан в градусах или радианах в зависимости от значения
//аргумента AngleMeasure. Функция не изменяет члены-данные исходного объекта класса,
//присваивая новые координаты объекту NP, передаваемый в функцию по ссылке. Перед враще-
//нием сравниваются адреса исходного объекта (this) и объекта NP. При совпадении адре-
//сов функция возвращает false и поворот не выполняется, так как это приведет к изме-
//нению значений членов-данных исходного объекта.
//При вращении координаты точки P(x,y) относительно точки T(x0,y0) изменяются на
//P'(x',y') согласно выражениям:
//  x' = x0 + (x-x0)*cos(Phi) - (y-y0)*sin(Phi);
//  y' = y0 + (x-x0)*sin(Phi) + (y-y0)*cos(Phi).
//Угол Phi отсчитывается в направлении против часовой стрелки от положительной полуоси
//OX. При вычислениях угол Phi выражается в радианах.
//-----------------------------------------------------------------------------------
//ПЕРЕДАВАЕМЫЕ ПАРАМЕТРЫ:
//1) TXYCoord& NP - ссылка на объект, которому присваиваются новые координаты точки
//   после ее поворота на угол Phi относительно произвольной точки;
//2) double Phi - значение угла поворота;
//3) bool AngleMeasure - радианная или градусная мера угла.
//3) const TXYCoord& T - констпантная ссылка на точку, относительно которой
//   выполняется поворот на угол Phi.
//-----------------------------------------------------------------------------------
//ВОЗВРАЩАЕМОЕ ЗНАЧЕНИЕ: bool lSuccess - результат выполнения поворота
//***********************************************************************************
bool TXYCoord::Rotation(TXYCoord& NP, double Phi, bool AngleMeasure, const TXYCoord& T) const
{if (this == &NP) return false;
 if (AngleMeasure == DEG) Phi *= DegRad;
 double cos_phi = cos(Phi);
 double sin_phi = sin(Phi);
 double dx = x-T.GetX();
 double dy = y-T.GetY();
 //Выполнение преобразования с присваиванием новых координат точке NP
 NP.SetX(T.GetX()+dx*cos_phi-dy*sin_phi);
 NP.SetY(T.GetY()+dx*sin_phi+dy*cos_phi);
 return true;
}





//-----------------------------------------------------------------------------------

#pragma package(smart_init)
 