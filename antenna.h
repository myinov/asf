//antenna.h
//Объявление класса Antenna
//Copyright (c) JohnSoft 1998. All rights reserved.
//Initial date: September,15,1998. Final date: September,29,1998.
//Заголовочный файл antenna.h объявляет класс Antenna, который позволяет
//описать свойства приемной антенны. Антенна имеет следующие характеристики:
//1. Type - тип антенны
//2. E_Location - расположение электрической плоскости антенны относительно
//   экваториальной (EQUATOR) или меридиональной плоскостей (MERIDIAN) Земли.
//3. E_Direct (antenn directivity in E-place) - характеристика направленности
//   антенны в электрической плоскости.
//4. H_Direct (antenn directivity in H-place) - характеристика направленности
//   антенны в магнитной плоскости.
//5. NoiseAmpl (noise amplitude law) - закон изменения амплитуды шума на выходе
//   приемной антенны.
//6. NoisePhase (noise phase law) - закон изменения фазы шума на выходе
//   приемной антенны.
//Шумы на выходе антенны моделируются с помощью случайных законов изменения
//амплитуды и фазы шума. По умолчанию моделируется гауссовский (белый) шум. У
//такого шума амплитуда изменяется по закону Релея, а фаза - по равновероятному
//закону на интервале [0..2PI]. Законы описаны и объявлены в файлах mathfunc.h и
//mathfunc.cpp. Данный класс является БАЗОВЫМ КЛАССОМ для классов описывающих
//элемент антенной решетки (совокупность антенн), линейную антенную решетку и
//плоскую антенную решетку.
//По умолчанию конструируется линейный полуволновой вибратор (half-wave dipole).
//Функции, задающие характеристики направленности антенны в E- и H-плоскостях,
//должны быть НОРМИРОВАННЫМИ, т.е. максимальное значение характеристики направ-
//ленности антенны в любом направлении на источник излучения не должно превышать
//единицы. По умолчанию E-плоскость антенны сонаправлена с меридианальной плос-
//костью Земли.
//Дополнительные параметры, наиболее полно определяющие свойства реальной
//антенны могут быть добавлены в данный класс, либо из данного класса может
//быть выведен новый класс с дополнительными характеристиками антенны.

#if !defined(__ANTENNA_H)
#define __ANTENNA_H

#include "mathfunc.h" //Заголовочный файл содержит объявления законов по которым
                      //могут изменяться составляющие амплитуд и фаз сигналов
#define CONSOLE 1     //В программе используется консольный ввод-вывод

typedef double (*LAWFUNC)(const ARGLIST* Arg);
typedef LAWFUNC* PLAWFUNC;

//Расположение электрической плоскости антенны относительно экваториальной или
//меридианальной плоскостей. По экваториальной плоскости отсчитывается угол по
//азимуту, по меридианальной плоскости - угол места
const bool EQUATOR  = true;
const bool MERIDIAN = false;

//Объявление идентификаторов плоскостей  антенны:
//E_PLACE - электрическая плоскость; H_PLACE - магнитная плоскость антенны
const bool E_PLANE = true;
const bool H_PLANE = false;

//const bool DEG = true;
//const bool RAD = false;

//Объявление идентификаторов возможных ошибок
const int ANTENNA_ABSENT = -10; //Антенна заданного типа не найдена

//******************************************************************************
//ОБЪЯВЛЕНИЕ СТРУКТУРЫ ANT_INFO
//Структура содержит информацию по антенне: идентификаторы функций, описывающих
//характеристику направленности антенны в электрической E и магнитной H плоскос-
//тях, наименование антенны и ее аббревиатуру на английском языке.
//******************************************************************************
typedef struct
{ uint type;      //идентификатор типа антенны
  uint EDirect;   //идентификатор закона направленности антенны в E-плоскости
  uint HDirect;   //идентификатор закона направленности антенны в H-плоскости
  char *rus_name; //русскоязычное наименование антенны
  char *eng_name; //англоязычное наименование антенны
  char *abbreviate; //сокращенное наименование антенны на английском языке
} ANT_INFO;

//Объявление идентификаторов типов антенн
//const uint UNEXIST    = 0;//Не зарегистрированная антенна
const uint HW_DIPOLE  = 1;//Полуволновой линейный вибратор - half-wave dipole
const uint HWSLOT_ANT = 2;//Полуволновая щелевая антенна - half-wave slot antenna
const uint PARAB_ANT  = 3;//Параболическая антенна - parabolic antenna

//ОБЪЯВЛЕНИЕ КОНСТАНТ, СООТНЕСЕННЫХ С ТИПАМИ ФУНКЦИЙ, ОПИСЫВАЮЩИХ ХАРАКТЕРИСТИКИ
//НАПРАВЛЕННОСТИ АНТЕННЫ.
//Характеристика направленности полуволнового диполя в E-плоскости
const uint FE_HWDIPOLE = 1;
//Характеристика направленности полуволнового диполя в H-плоскости
const uint FH_HWDIPOLE = 2;
//Характеристика направленности параболической антенны в E- и H-плоскости
const uint FEH_PARABANT = 3;

//*************************************************************************
// ОБЪЯВЛЕНИЕ ФУНКЦИЙ, ОПИСЫВАЮЩИХ ХАРАКТЕРИСТИКИ НАПРАВЛЕННОСТИ АНТЕННЫ
// ЗАДАННОГО ТИПА В E- И H-плоскостях
//*************************************************************************
//Нормированная характеристика направленности линейного полуволнового вибратора
//(полуволновой щели в H-плоскости) в электрической плоскости E:
//F(x)=|cos(sin(x)*PI/2)/cos(x)|
 double E_HWDipoleFunc(const ARGLIST* Arg); //1. FE_HWDIPOLE
//Нормированная характеристика направленности линейного полуволнового вибратора
//(полуволновой щели в Е-плоскости) в магнитной плоскости H: F(x)=1
 double H_HWDipoleFunc(const ARGLIST* Arg); //2. FH_HWDIPOLE
//Нормированная характеристика направленности параболической антенны в электри-
//ческой E и в магнитной H плоскостях:
//F(x)=|sin(2*PI*La*sin(x))/2*PI*La*sin(x)|
 double EH_ParabAntFunc(const ARGLIST* Arg); //3. FEH_PARABANT

//*****************************************************************************
// ОБЪЯВЛЕНИЕ ФУНКЦИЙ, ФОРМИРУЮЩИХ МАТЕМАТИЧЕСКУЮ ЗАПИСЬ ФУНКЦИИ ХАРАКТЕРИСТИКИ
// НАПРАВЛЕННОСТИ АНТЕННЫ С ЗАДАННЫМИ ПАРАМЕТРАМИ
// Все функции в результате работы возвращают указатель на строку с математичес-
// кой записью функции характеристики направленности с реальными коэффициентами.
// Функции принимают в качестве аргумента список параметров функции характерис-
// тики направленности антенны заданного типа.
//*****************************************************************************
 char* MathNotateE_HWDipole(const ARGLIST* Arg);   //1. FE_HWDIPOLE
 char* MathNotateH_HWDipole(const ARGLIST* Arg);   //2. FH_HWDIPOLE
 char* MathNotateEH_ParabAnt(const ARGLIST* Arg);  //3. FEH_PARABANT

//******************************************************************
// ОБЪЯВЛЕНИЯ ФУНКЦИЙ, РАБОТАЮЩИХ С МАССИВОМ AntennInfo
//******************************************************************
 uint GetIdEHDirByAntType(uint AntType, bool AntPlace);
 uint GetIndexByAntType(uint AntType);
 uint GetIdEDirByIndex(uint Index);
 uint GetIdHDirByIndex(uint Index);
 char* GetAntNameByIndex(uint Index);

//****************************************************************************
// ОБЪЯВЛЕНИЕ КЛАССА - АНТЕННА (ANTENNA)
//****************************************************************************
class Antenna {
 //--------------------------------------------------------
 // I. Объявление защищенных членов-данных класса Antenna
 //--------------------------------------------------------
 protected:
   uint Type; //Идентификатор типа антенны
   //Расположение электрической плоскости антенны относительно экваториальной
   //(E_Location = EQUATOR) или меридиональной плоскостей (E_Location = MERIDIAN)
   bool E_Location;

   //Характеристика направленности антенны в E-плоскости
   uint E_DirectType;
   double (*E_Direct)(const ARGLIST* Arg);
   ARGLIST* E_DirectArg; //Параметры функции направленности антенны в E-plane

   //Характеристика направленности антенны в H-плоскости
   uint H_DirectType;
   double (*H_Direct)(const ARGLIST* Arg);
   ARGLIST* H_DirectArg; //Параметры функции направленности антенны в H-plane

   uint NoiseAmplLawType; //Вид закона изменения амплитуды шума
   double (*NoiseAmpl)(const ARGLIST* Arg); //Закон изменения амплитуды шума
   ARGLIST* NoiseAmplArg; //Параметры закона изменения амплитуды шума

   uint NoisePhaseLawType; //Вид закона изменения фазы шума
   double (*NoisePhase)(const ARGLIST* Arg); //Закон изменения фазы шума
   ARGLIST* NoisePhaseArg; //Параметры закона изменения фазы шума

   //Индикатор, показывающий какая антенна была создана первой. Необходим для
   //контроля при удалении таблиц. Антенна созданная первой должна быть удалена
   //последней.
   bool First;
 //------------------------------------------------------------
 //II. Объявление общедоступных членов-функций класса ANTENNA
 //------------------------------------------------------------
 public:
  GetType() {return Type;};
  GetELocation() {return E_Location;};
  GetFirst() {return First;};
  //Установка углов источника сигнала, соответствующих E-плоскости и H-плоскости
  //антенны
  void SetAngle(double AzimuthAngle, double ElevateAngle, bool Deg = DEG);
  //Получение случайных значений амплитуды и фазы для шума на выходе антенны
  void SetRandNumber();

  double GetAmplNoise() {return NoiseAmplArg->List[0];};
  double GetPhaseNoise() {return NoisePhaseArg->List[0];};
  //Вычисление уровня шума на выходе антенны
  complex CalcUNoise(double Ampl, double Phase) {return polar(Ampl,Phase);};
  complex CalcUNoise();
  //Вычисление мощности шума на выходе антенны
  double CalcPNoise(double Ampl,double Phase) {return norm(polar(Ampl,Phase));};
  double CalcPNoise(complex UNoise) {return norm(UNoise);};
  double CalcPNoise() {return norm(CalcUNoise());};

  //Вычисление характеристики направленности антенны
  double CalcAntPatterns(bool EathPlane);
  virtual ARGLIST* AntPatterns(bool EathPlane, double InitAngle = -90,
                       double EndAngle = 90, double Step = 0.1, bool Deg = DEG);

  //Получение характеристик антенны в виде строкового объекта string
  virtual string& GetPerformance(string& s, bool headfoot = ON);
  //Установить характеристики антенны
  virtual void SetPerformance(uint AntType, bool EPlLocate = MERIDIAN,
                              ARGLIST* E_Arg = NULL,  ARGLIST* H_Arg = NULL);
  //Установка положения E-плоскости антенны относительно поверхности Земли
  void SetELocation(bool EPlLocate) {E_Location = EPlLocate;};
  //Установить случайные законы изменения амплитуды и фазы шума на выходе антенны
  void SetNoisePerform(uint AmplLaw, uint PhaseLaw, ARGLIST* AmplArg = NULL,
                       ARGLIST* PhaseArg = NULL);

 //**********  ОБЪЯВЛЕНИЕ КОНСТРУКТОРОВ И ДЕСТРУКТОРА КЛАССА ANTENNA **********
 //Объявление конструктора по умолчанию
 Antenna();
 //Объявление конструктора с аргументами
 Antenna(uint AntType, bool EPlLocate = MERIDIAN, ARGLIST* E_Arg = NULL,
         ARGLIST* H_Arg = NULL);
 Antenna(uint AntType, bool EPlLocate, uint AmplLaw, uint PhaseLaw,
         ARGLIST* E_Arg = NULL, ARGLIST* H_Arg = NULL, ARGLIST* AmplArg = NULL,
         ARGLIST* PhaseArg = NULL);
 //Перегрузка оператора присваивания (=) для класса Antenna
 //Overloading assignment operator for Antenna class
 Antenna& operator =(const Antenna &A);
 //Объявление конструктора копирования
 Antenna(const Antenna& A);
 //Объявление деструктора класса
 virtual ~Antenna();

 //---------------------------------------------------------
 //III. Объявление закрытых членов-функций класса Antenna
 //---------------------------------------------------------
 private:
 //Создание таблицы функций, описывающих характеристики направленности антенны
 //заданного типа в E- и H-плоскостях.
 void CreateTableOfAntDirect();
 //Создание таблицы случайных законов изменения АМПЛИТУДНОЙ и ФАЗОВОЙ характе-
 //ристики шума на выходе антенны
 void CreateTableOfNoiseLaw();

 //---------------------------------------------------------
 //IV. Объявление защищенных членов-функций класса Antenna
 //---------------------------------------------------------
 protected:
 //Удаление таблицы законов
 void DeleteTable(LAW* Table, uint& Size);

 //Объявление сервисных функций для работы с таблицами законов
 uint GetIndexLawByType(const LAW* Table, const uint Count, uint Type);
 ARGLIST* SetLaw(const LAW* Table, const uint Count, const uint SLawType,
                 uint& TLawType, LAWFUNC& RefFunc, ARGLIST* SArg = NULL);
};
//Завершение объявления класса Antenna

#endif  //ЗАВЕРШЕНИЕ ОБЪЯВЛЕНИЯ ЗАГОЛОВОЧНОГО ФАЙЛА "ANTENNA.H"
